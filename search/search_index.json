{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NimblePHP NimblePHP to prosty framework PHP oparty o MVC kt\u00f3ry ma u\u0142atwi\u0107 tworzenie projekt\u00f3w. Cele Framework opiera si\u0119 na prostych celach: Prostota Przejszysto\u015b\u0107 Szybko\u015b\u0107","title":"NimblePHP"},{"location":"#nimblephp","text":"NimblePHP to prosty framework PHP oparty o MVC kt\u00f3ry ma u\u0142atwi\u0107 tworzenie projekt\u00f3w.","title":"NimblePHP"},{"location":"#cele","text":"Framework opiera si\u0119 na prostych celach: Prostota Przejszysto\u015b\u0107 Szybko\u015b\u0107","title":"Cele"},{"location":"default-config/","text":"Domy\u015blna konfiguracja DEBUG=false LOG=true DEFAULT_CONTROLLER=index DEFAULT_METHOD=index DATABASE=false DATABASE_CHARSET=utf8 DATABASE_HOST=127.0.0.1 DATABASE_NAME= DATABASE_USERNAME= DATABASE_PASSWORD= DATABASE_PORT=3306","title":"Domy\u015blna konfiguracja"},{"location":"default-config/#domyslna-konfiguracja","text":"DEBUG=false LOG=true DEFAULT_CONTROLLER=index DEFAULT_METHOD=index DATABASE=false DATABASE_CHARSET=utf8 DATABASE_HOST=127.0.0.1 DATABASE_NAME= DATABASE_USERNAME= DATABASE_PASSWORD= DATABASE_PORT=3306","title":"Domy\u015blna konfiguracja"},{"location":"exceptions/","text":"Wyj\u0105tki Lista zwracanych wyj\u0105tk\u00f3w: G\u0142\u00f3wny wyj\u0105tek Nadrz\u0119dny wyj\u0105tek, \"rodzic\" wszystkich wyj\u0105tk\u00f3w zwracanych przez framework. Namespace: Nimblephp\\framework\\Exception\\NimbleException Konstruktor: public function __construct(string $message = \"System error\", int $code = 500, ?Throwable $previous = null) Wyj\u0105tek \"nie znaleziono\" Wyj\u0105tek zwracany, je\u017celi dana klasa, metoda, plik itd. nie istnieje. Namespace: Nimblephp\\framework\\Exception\\NimbleException Konstruktor: public function __construct(string $message = \"Not found\", int $code = 404, ?Throwable $previous = null)","title":"Wyj\u0105tki"},{"location":"exceptions/#wyjatki","text":"Lista zwracanych wyj\u0105tk\u00f3w:","title":"Wyj\u0105tki"},{"location":"exceptions/#gowny-wyjatek","text":"Nadrz\u0119dny wyj\u0105tek, \"rodzic\" wszystkich wyj\u0105tk\u00f3w zwracanych przez framework. Namespace: Nimblephp\\framework\\Exception\\NimbleException Konstruktor: public function __construct(string $message = \"System error\", int $code = 500, ?Throwable $previous = null)","title":"G\u0142\u00f3wny wyj\u0105tek"},{"location":"exceptions/#wyjatek-nie-znaleziono","text":"Wyj\u0105tek zwracany, je\u017celi dana klasa, metoda, plik itd. nie istnieje. Namespace: Nimblephp\\framework\\Exception\\NimbleException Konstruktor: public function __construct(string $message = \"Not found\", int $code = 404, ?Throwable $previous = null)","title":"Wyj\u0105tek \"nie znaleziono\""},{"location":"how-start/","text":"Jak zacz\u0105\u0107 Na samym pocz\u0105tku nale\u017cy zaimportowa\u0107 repozytorium composer composer require nimblephp/framework Nast\u0119pnie nale\u017cy utworzy\u0107 folder public a w nim plik index.php o tre\u015bci: <?php require('../vendor/autoload.php'); $route = new \\Nimblephp\\framework\\Route(new \\Nimblephp\\framework\\Request()); $kernel = new \\Nimblephp\\framework\\Kernel($route); $kernel->handle(); oraz plik .htaccess z zawarto\u015bci\u0105: RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.+)$ index.php?url=$1 [QSA,L] Teraz nale\u017cy uruchomi\u0107 plik index.php, pierwsze uruchomienie spowoduje utworzenie folder\u00f3w wymaganych przez projekt Aktualnie powinno wygl\u0105da\u0107 to tak: * folder_projektu * public * index.php * .htaccess * src * Controller * Model * View * storage * logs * vendor Teraz \"podstawowa\" wersja jest ju\u017c stworzona i mo\u017cna zacz\u0105\u0107 pisa\u0107 w\u0142asn\u0105 wirtyn\u0119.","title":"Jak zacz\u0105\u0107"},{"location":"how-start/#jak-zaczac","text":"Na samym pocz\u0105tku nale\u017cy zaimportowa\u0107 repozytorium composer composer require nimblephp/framework Nast\u0119pnie nale\u017cy utworzy\u0107 folder public a w nim plik index.php o tre\u015bci: <?php require('../vendor/autoload.php'); $route = new \\Nimblephp\\framework\\Route(new \\Nimblephp\\framework\\Request()); $kernel = new \\Nimblephp\\framework\\Kernel($route); $kernel->handle(); oraz plik .htaccess z zawarto\u015bci\u0105: RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.+)$ index.php?url=$1 [QSA,L] Teraz nale\u017cy uruchomi\u0107 plik index.php, pierwsze uruchomienie spowoduje utworzenie folder\u00f3w wymaganych przez projekt Aktualnie powinno wygl\u0105da\u0107 to tak: * folder_projektu * public * index.php * .htaccess * src * Controller * Model * View * storage * logs * vendor Teraz \"podstawowa\" wersja jest ju\u017c stworzona i mo\u017cna zacz\u0105\u0107 pisa\u0107 w\u0142asn\u0105 wirtyn\u0119.","title":"Jak zacz\u0105\u0107"},{"location":"required/","text":"Wymagania Aby uruchomi\u0107 framework wymagane jest: PHP >= 8.2 Composer","title":"Wymagania"},{"location":"required/#wymagania","text":"Aby uruchomi\u0107 framework wymagane jest: PHP >= 8.2 Composer","title":"Wymagania"},{"location":"documentation/config/","text":"Config Klasa s\u0142u\u017cy do zarz\u0105dzania konfiguracj\u0105 aplikacji, umo\u017cliwiaj\u0105c \u0142adowanie, zapisywanie i pobieranie warto\u015bci konfiguracyjnych. Namespace Klasa: Nimblephp\\framework\\Config Zmienne protected static array $config : Przechowuje wszystkie warto\u015bci konfiguracyjne jako tablica asocjacyjna. Metody get public static function get(string $name, mixed $default = null): mixed Pobiera warto\u015b\u0107 konfiguracji o podanej nazwie. Je\u015bli warto\u015b\u0107 nie istnieje, zwraca warto\u015b\u0107 domy\u015bln\u0105. set public static function set(string $name, string $value): void Ustawia warto\u015b\u0107 konfiguracji o podanej nazwie. loadFromEnv public static function loadFromEnv(string $filePath): bool \u0141aduje konfiguracje z pliku \u015brodowiskowego. Zwraca true je\u015bli za\u0142adowanie si\u0119 powiod\u0142o, w przeciwnym razie false . processEnvContent protected static function processEnvContent(string $content): void Przetwarza pojedyncz\u0105 lini\u0119 pliku \u015brodowiskowego, parsuj\u0105c nazw\u0119 i warto\u015b\u0107, a nast\u0119pnie zapisuje je do tablicy konfiguracji. parseEnvValue protected static function parseEnvValue(mixed $value): mixed Parsuje warto\u015b\u0107 podan\u0105 jako string do odpowiedniego typu danych, np. liczby, warto\u015bci logiczne, czy ci\u0105gi znak\u00f3w.","title":"Config"},{"location":"documentation/config/#config","text":"Klasa s\u0142u\u017cy do zarz\u0105dzania konfiguracj\u0105 aplikacji, umo\u017cliwiaj\u0105c \u0142adowanie, zapisywanie i pobieranie warto\u015bci konfiguracyjnych.","title":"Config"},{"location":"documentation/config/#namespace","text":"Klasa: Nimblephp\\framework\\Config","title":"Namespace"},{"location":"documentation/config/#zmienne","text":"protected static array $config : Przechowuje wszystkie warto\u015bci konfiguracyjne jako tablica asocjacyjna.","title":"Zmienne"},{"location":"documentation/config/#metody","text":"","title":"Metody"},{"location":"documentation/config/#get","text":"public static function get(string $name, mixed $default = null): mixed Pobiera warto\u015b\u0107 konfiguracji o podanej nazwie. Je\u015bli warto\u015b\u0107 nie istnieje, zwraca warto\u015b\u0107 domy\u015bln\u0105.","title":"get"},{"location":"documentation/config/#set","text":"public static function set(string $name, string $value): void Ustawia warto\u015b\u0107 konfiguracji o podanej nazwie.","title":"set"},{"location":"documentation/config/#loadfromenv","text":"public static function loadFromEnv(string $filePath): bool \u0141aduje konfiguracje z pliku \u015brodowiskowego. Zwraca true je\u015bli za\u0142adowanie si\u0119 powiod\u0142o, w przeciwnym razie false .","title":"loadFromEnv"},{"location":"documentation/config/#processenvcontent","text":"protected static function processEnvContent(string $content): void Przetwarza pojedyncz\u0105 lini\u0119 pliku \u015brodowiskowego, parsuj\u0105c nazw\u0119 i warto\u015b\u0107, a nast\u0119pnie zapisuje je do tablicy konfiguracji.","title":"processEnvContent"},{"location":"documentation/config/#parseenvvalue","text":"protected static function parseEnvValue(mixed $value): mixed Parsuje warto\u015b\u0107 podan\u0105 jako string do odpowiedniego typu danych, np. liczby, warto\u015bci logiczne, czy ci\u0105gi znak\u00f3w.","title":"parseEnvValue"},{"location":"documentation/controller/","text":"Controller Kontroler odpowiada za odbieranie danych od u\u017cytkownika, decydowanie o tym, co zrobi\u0107 z tymi danymi, a nast\u0119pnie delegowanie zada\u0144 do odpowiednich modeli lub wy\u015bwietlanie odpowiednich widok\u00f3w. Namespace Klasa: Nimblephp\\framework\\Controller Abstract: Nimblephp\\framework\\Abstracts\\AbstractController Zmienne public string $name : Nazwa za\u0142adowanego kontrolera. public string $action : Nazwa wywo\u0142anej akcji. Metody loadModel public function loadModel(string $name): AbstractModel Metoda loadModel s\u0142u\u017cy do \u0142adowania modelu na podstawie podanej nazwy.","title":"Controller"},{"location":"documentation/controller/#controller","text":"Kontroler odpowiada za odbieranie danych od u\u017cytkownika, decydowanie o tym, co zrobi\u0107 z tymi danymi, a nast\u0119pnie delegowanie zada\u0144 do odpowiednich modeli lub wy\u015bwietlanie odpowiednich widok\u00f3w.","title":"Controller"},{"location":"documentation/controller/#namespace","text":"Klasa: Nimblephp\\framework\\Controller Abstract: Nimblephp\\framework\\Abstracts\\AbstractController","title":"Namespace"},{"location":"documentation/controller/#zmienne","text":"public string $name : Nazwa za\u0142adowanego kontrolera. public string $action : Nazwa wywo\u0142anej akcji.","title":"Zmienne"},{"location":"documentation/controller/#metody","text":"","title":"Metody"},{"location":"documentation/controller/#loadmodel","text":"public function loadModel(string $name): AbstractModel Metoda loadModel s\u0142u\u017cy do \u0142adowania modelu na podstawie podanej nazwy.","title":"loadModel"},{"location":"documentation/log/","text":"Log Klasa s\u0142u\u017cy do logowania zdarze\u0144 w aplikacji. Namespace Klasa: Nimblephp\\framework\\Log Zmienne public static string $session : Unikatowy identyfikator sesji, generowany dla ka\u017cdej sesji logowania. Metody log public static function log(string $message, string $level = 'INFO', array $content = []): bool Metoda do zapisywania log\u00f3w. Pozwala na zapisanie wiadomo\u015bci logu, poziomu logowania oraz dodatkowych tre\u015bci. Log jest zapisywany tylko je\u015bli w konfiguracji aplikacji w\u0142\u0105czone jest logowanie. Generuje unikatowy identyfikator sesji, je\u015bli nie istnieje. Formatuje i zapisuje dane logu w pliku JSON w katalogu log\u00f3w projektu. Zwraca true , je\u015bli zapis si\u0119 powi\u00f3d\u0142, lub false w przypadku niepowodzenia.","title":"Log"},{"location":"documentation/log/#log","text":"Klasa s\u0142u\u017cy do logowania zdarze\u0144 w aplikacji.","title":"Log"},{"location":"documentation/log/#namespace","text":"Klasa: Nimblephp\\framework\\Log","title":"Namespace"},{"location":"documentation/log/#zmienne","text":"public static string $session : Unikatowy identyfikator sesji, generowany dla ka\u017cdej sesji logowania.","title":"Zmienne"},{"location":"documentation/log/#metody","text":"","title":"Metody"},{"location":"documentation/log/#log_1","text":"public static function log(string $message, string $level = 'INFO', array $content = []): bool Metoda do zapisywania log\u00f3w. Pozwala na zapisanie wiadomo\u015bci logu, poziomu logowania oraz dodatkowych tre\u015bci. Log jest zapisywany tylko je\u015bli w konfiguracji aplikacji w\u0142\u0105czone jest logowanie. Generuje unikatowy identyfikator sesji, je\u015bli nie istnieje. Formatuje i zapisuje dane logu w pliku JSON w katalogu log\u00f3w projektu. Zwraca true , je\u015bli zapis si\u0119 powi\u00f3d\u0142, lub false w przypadku niepowodzenia.","title":"log"},{"location":"documentation/model/","text":"Model Model to g\u0142\u00f3wna cz\u0119\u015b\u0107 systemu odpowiadaj\u0105ca za logik\u0119 biznesow\u0105 i zarz\u0105dzanie danymi. Jego zadaniem jest przechowywanie danych, ich przetwarzanie i dostarczanie ich w odpowiedniej formie do kontrolera. Namespace Klasa: Nimblephp\\framework\\Model Abstract: Nimblephp\\framework\\Abstracts\\AbstractModel Interface: Nimblephp\\framework\\Interfaces\\ModelInterface Zmienne public null|string|false $useTable : Nazwa tabeli w bazie danych u\u017cywana przez model, null oznacza automatyczne ustalenie nazwy, false deaktywuje dzia\u0142anie z baz\u0105 danych. public string $name : Nazwa modelu. protected Table $table : Instancja tabeli obs\u0142uguj\u0105cej operacje na bazie danych. protected ?int $id : Aktualne ID elementu w bazie danych. Metody create public function create(array $data): bool Tworzy nowy rekord w bazie danych na podstawie dostarczonych danych. Rzuca DatabaseException je\u015bli operacja nie powiedzie si\u0119. read public function read(?array $condition = null, ?array $columns = null, ?string $orderBy = null): array Zwraca pojedynczy rekord na podstawie podanych warunk\u00f3w. Rzuca DatabaseException przy b\u0142\u0119dzie. readAll public function readAll(?array $condition = null, ?array $columns = null, ?string $orderBy = null, ?string $limit = null, ?string $groupBy = null): array Zwraca list\u0119 rekord\u00f3w spe\u0142niaj\u0105cych podane warunki. Rzuca DatabaseException przy b\u0142\u0119dzie. update public function update(array $data): bool Aktualizuje rekord o danym ID, u\u017cywaj\u0105c dostarczonych danych. Rzuca DatabaseException je\u015bli operacja nie powiedzie si\u0119. delete public function delete(): bool Usuwa rekord o danym ID. Rzuca DatabaseException je\u015bli operacja nie powiedzie si\u0119. getId public function getId(): ?int Zwraca ID aktualnie zarz\u0105dzanego elementu. setId public function setId(?int $id = null): ModelInterface Ustawia ID dla aktualnie zarz\u0105dzanego elementu, zwraca sam\u0105 siebie. prepareTableInstance public function prepareTableInstance(): void Przygotowuje instancj\u0119 tabeli, na kt\u00f3rej b\u0119d\u0105 wykonywane operacje.","title":"Model"},{"location":"documentation/model/#model","text":"Model to g\u0142\u00f3wna cz\u0119\u015b\u0107 systemu odpowiadaj\u0105ca za logik\u0119 biznesow\u0105 i zarz\u0105dzanie danymi. Jego zadaniem jest przechowywanie danych, ich przetwarzanie i dostarczanie ich w odpowiedniej formie do kontrolera.","title":"Model"},{"location":"documentation/model/#namespace","text":"Klasa: Nimblephp\\framework\\Model Abstract: Nimblephp\\framework\\Abstracts\\AbstractModel Interface: Nimblephp\\framework\\Interfaces\\ModelInterface","title":"Namespace"},{"location":"documentation/model/#zmienne","text":"public null|string|false $useTable : Nazwa tabeli w bazie danych u\u017cywana przez model, null oznacza automatyczne ustalenie nazwy, false deaktywuje dzia\u0142anie z baz\u0105 danych. public string $name : Nazwa modelu. protected Table $table : Instancja tabeli obs\u0142uguj\u0105cej operacje na bazie danych. protected ?int $id : Aktualne ID elementu w bazie danych.","title":"Zmienne"},{"location":"documentation/model/#metody","text":"","title":"Metody"},{"location":"documentation/model/#create","text":"public function create(array $data): bool Tworzy nowy rekord w bazie danych na podstawie dostarczonych danych. Rzuca DatabaseException je\u015bli operacja nie powiedzie si\u0119.","title":"create"},{"location":"documentation/model/#read","text":"public function read(?array $condition = null, ?array $columns = null, ?string $orderBy = null): array Zwraca pojedynczy rekord na podstawie podanych warunk\u00f3w. Rzuca DatabaseException przy b\u0142\u0119dzie.","title":"read"},{"location":"documentation/model/#readall","text":"public function readAll(?array $condition = null, ?array $columns = null, ?string $orderBy = null, ?string $limit = null, ?string $groupBy = null): array Zwraca list\u0119 rekord\u00f3w spe\u0142niaj\u0105cych podane warunki. Rzuca DatabaseException przy b\u0142\u0119dzie.","title":"readAll"},{"location":"documentation/model/#update","text":"public function update(array $data): bool Aktualizuje rekord o danym ID, u\u017cywaj\u0105c dostarczonych danych. Rzuca DatabaseException je\u015bli operacja nie powiedzie si\u0119.","title":"update"},{"location":"documentation/model/#delete","text":"public function delete(): bool Usuwa rekord o danym ID. Rzuca DatabaseException je\u015bli operacja nie powiedzie si\u0119.","title":"delete"},{"location":"documentation/model/#getid","text":"public function getId(): ?int Zwraca ID aktualnie zarz\u0105dzanego elementu.","title":"getId"},{"location":"documentation/model/#setid","text":"public function setId(?int $id = null): ModelInterface Ustawia ID dla aktualnie zarz\u0105dzanego elementu, zwraca sam\u0105 siebie.","title":"setId"},{"location":"documentation/model/#preparetableinstance","text":"public function prepareTableInstance(): void Przygotowuje instancj\u0119 tabeli, na kt\u00f3rej b\u0119d\u0105 wykonywane operacje.","title":"prepareTableInstance"},{"location":"documentation/request/","text":"Request Klasa s\u0142u\u017cy do obs\u0142ugi \u017c\u0105da\u0144 HTTP. Namespace Klasa: Nimblephp\\framework\\Request Interface: Nimblephp\\framework\\Interfaces\\RequestInterface Zmienne private array $query : Dane przes\u0142ane metod\u0105 GET. private array $post : Dane przes\u0142ane metod\u0105 POST. private array $cookies : Ciasteczka HTTP \u017c\u0105dania. private array $files : Pliki przes\u0142ane w ramach \u017c\u0105dania. private array $headers : Nag\u0142\u00f3wki HTTP \u017c\u0105dania. private array $server : Informacje o serwerze i \u015brodowisku wykonania \u017c\u0105dania. Metody __construct __construct() Konstruktor klasy, inicjalizuje zmienne przechowuj\u0105ce dane \u017c\u0105dania. getAllHeaders private function getAllHeaders(): array Pobiera wszystkie nag\u0142\u00f3wki HTTP \u017c\u0105dania. getQuery public function getQuery($key, $default = null): mixed Pobranie warto\u015bci przekazanej metod\u0105 GET. getPost public function getPost($key, $default = null): mixed Pobranie warto\u015bci przekazanej metod\u0105 POST. getCookie public function getCookie($key, $default = null): mixed Pobranie warto\u015bci ciasteczka. getFile public function getFile($key): mixed Pobranie przes\u0142anego pliku. getHeader public function getHeader($key): mixed Pobranie warto\u015bci nag\u0142\u00f3wka. getMethod public function getMethod(): string Pobranie metody HTTP \u017c\u0105dania. getUri public function getUri(): string Pobranie URI \u017c\u0105dania. getServer public function getServer($key, $default = null): mixed Pobranie informacji o serwerze lub \u015brodowisku.","title":"Request"},{"location":"documentation/request/#request","text":"Klasa s\u0142u\u017cy do obs\u0142ugi \u017c\u0105da\u0144 HTTP.","title":"Request"},{"location":"documentation/request/#namespace","text":"Klasa: Nimblephp\\framework\\Request Interface: Nimblephp\\framework\\Interfaces\\RequestInterface","title":"Namespace"},{"location":"documentation/request/#zmienne","text":"private array $query : Dane przes\u0142ane metod\u0105 GET. private array $post : Dane przes\u0142ane metod\u0105 POST. private array $cookies : Ciasteczka HTTP \u017c\u0105dania. private array $files : Pliki przes\u0142ane w ramach \u017c\u0105dania. private array $headers : Nag\u0142\u00f3wki HTTP \u017c\u0105dania. private array $server : Informacje o serwerze i \u015brodowisku wykonania \u017c\u0105dania.","title":"Zmienne"},{"location":"documentation/request/#metody","text":"","title":"Metody"},{"location":"documentation/request/#__construct","text":"__construct() Konstruktor klasy, inicjalizuje zmienne przechowuj\u0105ce dane \u017c\u0105dania.","title":"__construct"},{"location":"documentation/request/#getallheaders","text":"private function getAllHeaders(): array Pobiera wszystkie nag\u0142\u00f3wki HTTP \u017c\u0105dania.","title":"getAllHeaders"},{"location":"documentation/request/#getquery","text":"public function getQuery($key, $default = null): mixed Pobranie warto\u015bci przekazanej metod\u0105 GET.","title":"getQuery"},{"location":"documentation/request/#getpost","text":"public function getPost($key, $default = null): mixed Pobranie warto\u015bci przekazanej metod\u0105 POST.","title":"getPost"},{"location":"documentation/request/#getcookie","text":"public function getCookie($key, $default = null): mixed Pobranie warto\u015bci ciasteczka.","title":"getCookie"},{"location":"documentation/request/#getfile","text":"public function getFile($key): mixed Pobranie przes\u0142anego pliku.","title":"getFile"},{"location":"documentation/request/#getheader","text":"public function getHeader($key): mixed Pobranie warto\u015bci nag\u0142\u00f3wka.","title":"getHeader"},{"location":"documentation/request/#getmethod","text":"public function getMethod(): string Pobranie metody HTTP \u017c\u0105dania.","title":"getMethod"},{"location":"documentation/request/#geturi","text":"public function getUri(): string Pobranie URI \u017c\u0105dania.","title":"getUri"},{"location":"documentation/request/#getserver","text":"public function getServer($key, $default = null): mixed Pobranie informacji o serwerze lub \u015brodowisku.","title":"getServer"},{"location":"documentation/response/","text":"Response Klasa s\u0142u\u017cy do obs\u0142ugi odpowiedzi HTTP. Namespace Klasa: Nimblephp\\framework\\Response Interface: Nimblephp\\framework\\Interfaces\\ResponseInterface Zmienne protected mixed $content : Tre\u015b\u0107 odpowiedzi, mo\u017ce by\u0107 r\u00f3\u017cnego typu. protected int $statusCode = 200 : Kod statusu HTTP odpowiedzi, domy\u015blnie 200. protected array $headers = [] : Tablica nag\u0142\u00f3wk\u00f3w HTTP odpowiedzi. protected string $statusText = '' : Tekstowy opis kodu statusu HTTP. Metody __construct __construct() Konstruktor klasy, nie jest zdefiniowany w podanym kodzie. getContent public function getContent(): string Pobranie tre\u015bci odpowiedzi. setContent public function setContent(mixed $content): void Ustawienie tre\u015bci odpowiedzi. getStatusCode public function getStatusCode(): int Pobranie kodu statusu HTTP. setStatusCode public function setStatusCode(int $code, string $text = ''): void Ustawienie kodu statusu HTTP i opcjonalnie tekstowego opisu. addHeader public function addHeader(string $name, string $value): void Dodanie nag\u0142\u00f3wka HTTP do odpowiedzi. send public function send(): void Wys\u0142anie odpowiedzi do klienta, wraz z nag\u0142\u00f3wkami i tre\u015bci\u0105.","title":"Response"},{"location":"documentation/response/#response","text":"Klasa s\u0142u\u017cy do obs\u0142ugi odpowiedzi HTTP.","title":"Response"},{"location":"documentation/response/#namespace","text":"Klasa: Nimblephp\\framework\\Response Interface: Nimblephp\\framework\\Interfaces\\ResponseInterface","title":"Namespace"},{"location":"documentation/response/#zmienne","text":"protected mixed $content : Tre\u015b\u0107 odpowiedzi, mo\u017ce by\u0107 r\u00f3\u017cnego typu. protected int $statusCode = 200 : Kod statusu HTTP odpowiedzi, domy\u015blnie 200. protected array $headers = [] : Tablica nag\u0142\u00f3wk\u00f3w HTTP odpowiedzi. protected string $statusText = '' : Tekstowy opis kodu statusu HTTP.","title":"Zmienne"},{"location":"documentation/response/#metody","text":"","title":"Metody"},{"location":"documentation/response/#__construct","text":"__construct() Konstruktor klasy, nie jest zdefiniowany w podanym kodzie.","title":"__construct"},{"location":"documentation/response/#getcontent","text":"public function getContent(): string Pobranie tre\u015bci odpowiedzi.","title":"getContent"},{"location":"documentation/response/#setcontent","text":"public function setContent(mixed $content): void Ustawienie tre\u015bci odpowiedzi.","title":"setContent"},{"location":"documentation/response/#getstatuscode","text":"public function getStatusCode(): int Pobranie kodu statusu HTTP.","title":"getStatusCode"},{"location":"documentation/response/#setstatuscode","text":"public function setStatusCode(int $code, string $text = ''): void Ustawienie kodu statusu HTTP i opcjonalnie tekstowego opisu.","title":"setStatusCode"},{"location":"documentation/response/#addheader","text":"public function addHeader(string $name, string $value): void Dodanie nag\u0142\u00f3wka HTTP do odpowiedzi.","title":"addHeader"},{"location":"documentation/response/#send","text":"public function send(): void Wys\u0142anie odpowiedzi do klienta, wraz z nag\u0142\u00f3wkami i tre\u015bci\u0105.","title":"send"},{"location":"documentation/route/","text":"Route Klasa s\u0142u\u017cy do interpretacji \u017c\u0105da\u0144 URL. Namespace Klasa: Nimblephp\\framework\\Route Interface: Nimblephp\\framework\\Interfaces\\RouteInterface Zmienne protected ?string $controller' : Nazwa kontrolera. protected ?string $method : Nazwa metody. protected array $params = [] : Parametry. Metody __construct __construct(RequestInterface $request) Tworzenie instancji routingu. getController public function getController(): string Pobranie nazwy kontrolera. setController public function setController(?string $controller): void Zmiana nazwy kontrolera. getMethod public function getMethod(): string Pobranie nazwy metody. setMethod public function setMethod(?string $method): void Zmiana nazwy metody. getParams public function getParams(): array Pobranie parametr\u00f3w. setParams public function setParams(array $params): void Zmiana parametr\u00f3w.","title":"Route"},{"location":"documentation/route/#route","text":"Klasa s\u0142u\u017cy do interpretacji \u017c\u0105da\u0144 URL.","title":"Route"},{"location":"documentation/route/#namespace","text":"Klasa: Nimblephp\\framework\\Route Interface: Nimblephp\\framework\\Interfaces\\RouteInterface","title":"Namespace"},{"location":"documentation/route/#zmienne","text":"protected ?string $controller' : Nazwa kontrolera. protected ?string $method : Nazwa metody. protected array $params = [] : Parametry.","title":"Zmienne"},{"location":"documentation/route/#metody","text":"","title":"Metody"},{"location":"documentation/route/#__construct","text":"__construct(RequestInterface $request) Tworzenie instancji routingu.","title":"__construct"},{"location":"documentation/route/#getcontroller","text":"public function getController(): string Pobranie nazwy kontrolera.","title":"getController"},{"location":"documentation/route/#setcontroller","text":"public function setController(?string $controller): void Zmiana nazwy kontrolera.","title":"setController"},{"location":"documentation/route/#getmethod","text":"public function getMethod(): string Pobranie nazwy metody.","title":"getMethod"},{"location":"documentation/route/#setmethod","text":"public function setMethod(?string $method): void Zmiana nazwy metody.","title":"setMethod"},{"location":"documentation/route/#getparams","text":"public function getParams(): array Pobranie parametr\u00f3w.","title":"getParams"},{"location":"documentation/route/#setparams","text":"public function setParams(array $params): void Zmiana parametr\u00f3w.","title":"setParams"},{"location":"documentation/view/","text":"View Wskaz\u00f3wka: Domy\u015blny widok opiera si\u0119 na plikach phtml. Je\u015bli potrzebujesz bardziej zaawansowanych widok\u00f3w, wkr\u00f3tce pojawi si\u0119 instrukcja i kod dla twig i innych. Widok odpowiada za prezentacj\u0119 danych u\u017cytkownikowi. Jest to komponent, kt\u00f3ry wy\u015bwietla dane, kt\u00f3re otrzymuje z kontrolera, zazwyczaj w postaci graficznego interfejsu u\u017cytkownika. Namespace Klasa: Nimblephp\\framework\\View Interface: Nimblephp\\framework\\Interfaces\\ViewInterface Zmienne protected string $viewPath = '/src/View/' : \u015acie\u017cka do folderu z widokami. protected int $responseCode = 200 : Kod odpowiedzi. Metody setResponseCode public function setResponseCode(int $responseCode): void Definiowanie kodu odpowiedzi. render public function render(string $viewName, array $data = []): void Renderowanie widoku na podstawie nazwy widoku i dostarczonych danych.","title":"View"},{"location":"documentation/view/#view","text":"Wskaz\u00f3wka: Domy\u015blny widok opiera si\u0119 na plikach phtml. Je\u015bli potrzebujesz bardziej zaawansowanych widok\u00f3w, wkr\u00f3tce pojawi si\u0119 instrukcja i kod dla twig i innych. Widok odpowiada za prezentacj\u0119 danych u\u017cytkownikowi. Jest to komponent, kt\u00f3ry wy\u015bwietla dane, kt\u00f3re otrzymuje z kontrolera, zazwyczaj w postaci graficznego interfejsu u\u017cytkownika.","title":"View"},{"location":"documentation/view/#namespace","text":"Klasa: Nimblephp\\framework\\View Interface: Nimblephp\\framework\\Interfaces\\ViewInterface","title":"Namespace"},{"location":"documentation/view/#zmienne","text":"protected string $viewPath = '/src/View/' : \u015acie\u017cka do folderu z widokami. protected int $responseCode = 200 : Kod odpowiedzi.","title":"Zmienne"},{"location":"documentation/view/#metody","text":"","title":"Metody"},{"location":"documentation/view/#setresponsecode","text":"public function setResponseCode(int $responseCode): void Definiowanie kodu odpowiedzi.","title":"setResponseCode"},{"location":"documentation/view/#render","text":"public function render(string $viewName, array $data = []): void Renderowanie widoku na podstawie nazwy widoku i dostarczonych danych.","title":"render"}]}
{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NimblePHP NimblePHP to prosty framework PHP oparty o MVC kt\u00f3ry ma u\u0142atwi\u0107 tworzenie projekt\u00f3w. Cele Framework opiera si\u0119 na prostych celach: Prostota Przejszysto\u015b\u0107 Szybko\u015b\u0107","title":"NimblePHP"},{"location":"#nimblephp","text":"NimblePHP to prosty framework PHP oparty o MVC kt\u00f3ry ma u\u0142atwi\u0107 tworzenie projekt\u00f3w.","title":"NimblePHP"},{"location":"#cele","text":"Framework opiera si\u0119 na prostych celach: Prostota Przejszysto\u015b\u0107 Szybko\u015b\u0107","title":"Cele"},{"location":"default-config/","text":"Domy\u015blna konfiguracja DEBUG=false LOG=true DEFAULT_CONTROLLER=index DEFAULT_METHOD=index DATABASE=false DATABASE_TYPE=mysql DATABASE_PATH=\"database.sqlite\" DATABASE_CHARSET=utf8 DATABASE_HOST=127.0.0.1 DATABASE_NAME= DATABASE_USERNAME= DATABASE_PASSWORD= DATABASE_PORT=3306 W\u0142asna konfiguracja W\u0142asn\u0105 konfiguracj\u0119 mo\u017ceby zapisywa\u0107 w plikach w g\u0142\u00f3wnym folderze projektu, pierwszym plikiem jest .env kt\u00f3ry powinien powiada\u0107 konfiguracj\u0119 bez wra\u017cliwych danych, drugim natomiat jest .env.local kt\u00f3ry powinien by\u0107 dodany do .gitignore i nie zapisywany w projekcie plik ten nadpisuje konfiguracje z wszystkich poprzednich sposob\u00f3w \u0142adowania U\u017cycie Konfiguracj\u0119 odczytujemy za pomoc\u0105 $_ENV","title":"Domy\u015blna konfiguracja"},{"location":"default-config/#domyslna-konfiguracja","text":"DEBUG=false LOG=true DEFAULT_CONTROLLER=index DEFAULT_METHOD=index DATABASE=false DATABASE_TYPE=mysql DATABASE_PATH=\"database.sqlite\" DATABASE_CHARSET=utf8 DATABASE_HOST=127.0.0.1 DATABASE_NAME= DATABASE_USERNAME= DATABASE_PASSWORD= DATABASE_PORT=3306","title":"Domy\u015blna konfiguracja"},{"location":"default-config/#wasna-konfiguracja","text":"W\u0142asn\u0105 konfiguracj\u0119 mo\u017ceby zapisywa\u0107 w plikach w g\u0142\u00f3wnym folderze projektu, pierwszym plikiem jest .env kt\u00f3ry powinien powiada\u0107 konfiguracj\u0119 bez wra\u017cliwych danych, drugim natomiat jest .env.local kt\u00f3ry powinien by\u0107 dodany do .gitignore i nie zapisywany w projekcie plik ten nadpisuje konfiguracje z wszystkich poprzednich sposob\u00f3w \u0142adowania","title":"W\u0142asna konfiguracja"},{"location":"default-config/#uzycie","text":"Konfiguracj\u0119 odczytujemy za pomoc\u0105 $_ENV","title":"U\u017cycie"},{"location":"exceptions/","text":"Wyj\u0105tki Lista zwracanych wyj\u0105tk\u00f3w: G\u0142\u00f3wny wyj\u0105tek Nadrz\u0119dny wyj\u0105tek, \"rodzic\" wszystkich wyj\u0105tk\u00f3w zwracanych przez framework. Namespace: Nimblephp\\framework\\Exception\\NimbleException Konstruktor: public function __construct(string $message = \"System error\", int $code = 500, ?Throwable $previous = null) Wyj\u0105tek \"nie znaleziono\" Wyj\u0105tek zwracany, je\u017celi dana klasa, metoda, plik itd. nie istnieje. Namespace: Nimblephp\\framework\\Exception\\NimbleException Konstruktor: public function __construct(string $message = \"Not found\", int $code = 404, ?Throwable $previous = null) Ukryty wyj\u0105tek Wyj\u0105tek zwraca b\u0142\u0105d ale ukrywa tre\u015b\u0107 dla klienta Namespace: Nimblephp\\framework\\Exception\\HiddenException Rodzic: Nimblephp\\framework\\Exception\\NimbleException Konstruktor: public function __construct(string $message = \"System error\", int $code = 500, ?Throwable $previous = null)``` Metody: getHiddenMessage public function loadModel(string $name): AbstractModel Zwraca ukryt\u0105 tre\u015b\u0107 Wyj\u0105tek bazodanowy Wyj\u0105tek dla b\u0142\u0119d\u00f3w bazy danych Namespace: Nimblephp\\framework\\Exception\\DatabaseException Rodzic: Nimblephp\\framework\\Exception\\HiddenException Konstruktor: public function __construct(string $message = \"Database error\", int $code = 500, ?Throwable $previous = null)","title":"Wyj\u0105tki"},{"location":"exceptions/#wyjatki","text":"Lista zwracanych wyj\u0105tk\u00f3w:","title":"Wyj\u0105tki"},{"location":"exceptions/#gowny-wyjatek","text":"Nadrz\u0119dny wyj\u0105tek, \"rodzic\" wszystkich wyj\u0105tk\u00f3w zwracanych przez framework. Namespace: Nimblephp\\framework\\Exception\\NimbleException Konstruktor: public function __construct(string $message = \"System error\", int $code = 500, ?Throwable $previous = null)","title":"G\u0142\u00f3wny wyj\u0105tek"},{"location":"exceptions/#wyjatek-nie-znaleziono","text":"Wyj\u0105tek zwracany, je\u017celi dana klasa, metoda, plik itd. nie istnieje. Namespace: Nimblephp\\framework\\Exception\\NimbleException Konstruktor: public function __construct(string $message = \"Not found\", int $code = 404, ?Throwable $previous = null)","title":"Wyj\u0105tek \"nie znaleziono\""},{"location":"exceptions/#ukryty-wyjatek","text":"Wyj\u0105tek zwraca b\u0142\u0105d ale ukrywa tre\u015b\u0107 dla klienta Namespace: Nimblephp\\framework\\Exception\\HiddenException Rodzic: Nimblephp\\framework\\Exception\\NimbleException Konstruktor: public function __construct(string $message = \"System error\", int $code = 500, ?Throwable $previous = null)``` Metody:","title":"Ukryty wyj\u0105tek"},{"location":"exceptions/#gethiddenmessage","text":"public function loadModel(string $name): AbstractModel Zwraca ukryt\u0105 tre\u015b\u0107","title":"getHiddenMessage"},{"location":"exceptions/#wyjatek-bazodanowy","text":"Wyj\u0105tek dla b\u0142\u0119d\u00f3w bazy danych Namespace: Nimblephp\\framework\\Exception\\DatabaseException Rodzic: Nimblephp\\framework\\Exception\\HiddenException Konstruktor: public function __construct(string $message = \"Database error\", int $code = 500, ?Throwable $previous = null)","title":"Wyj\u0105tek bazodanowy"},{"location":"how-start/","text":"Jak zacz\u0105\u0107 Na samym pocz\u0105tku nale\u017cy zaimportowa\u0107 repozytorium composer composer require nimblephp/framework Nast\u0119pnie nale\u017cy utworzy\u0107 folder public a w nim plik index.php o tre\u015bci: <?php require ( '../vendor/autoload.php' ); $route = new \\Nimblephp\\framework\\Route ( new \\Nimblephp\\framework\\Request ()); $kernel = new \\Nimblephp\\framework\\Kernel ( $route ); $kernel -> handle (); oraz plik .htaccess z zawarto\u015bci\u0105: RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.+)$ index.php?url=$1 [QSA,L] Teraz nale\u017cy uruchomi\u0107 plik index.php, pierwsze uruchomienie spowoduje utworzenie folder\u00f3w wymaganych przez projekt Aktualnie powinno wygl\u0105da\u0107 to tak: * folder_projektu * public * index.php * .htaccess * src * Controller * Model * View * storage * logs * vendor Teraz \"podstawowa\" wersja jest ju\u017c stworzona i mo\u017cna zacz\u0105\u0107 pisa\u0107 w\u0142asn\u0105 wirtyn\u0119.","title":"Jak zacz\u0105\u0107"},{"location":"how-start/#jak-zaczac","text":"Na samym pocz\u0105tku nale\u017cy zaimportowa\u0107 repozytorium composer composer require nimblephp/framework Nast\u0119pnie nale\u017cy utworzy\u0107 folder public a w nim plik index.php o tre\u015bci: <?php require ( '../vendor/autoload.php' ); $route = new \\Nimblephp\\framework\\Route ( new \\Nimblephp\\framework\\Request ()); $kernel = new \\Nimblephp\\framework\\Kernel ( $route ); $kernel -> handle (); oraz plik .htaccess z zawarto\u015bci\u0105: RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.+)$ index.php?url=$1 [QSA,L] Teraz nale\u017cy uruchomi\u0107 plik index.php, pierwsze uruchomienie spowoduje utworzenie folder\u00f3w wymaganych przez projekt Aktualnie powinno wygl\u0105da\u0107 to tak: * folder_projektu * public * index.php * .htaccess * src * Controller * Model * View * storage * logs * vendor Teraz \"podstawowa\" wersja jest ju\u017c stworzona i mo\u017cna zacz\u0105\u0107 pisa\u0107 w\u0142asn\u0105 wirtyn\u0119.","title":"Jak zacz\u0105\u0107"},{"location":"required/","text":"Wymagania Aby uruchomi\u0107 framework wymagane jest: PHP >= 8.2 Composer","title":"Wymagania"},{"location":"required/#wymagania","text":"Aby uruchomi\u0107 framework wymagane jest: PHP >= 8.2 Composer","title":"Wymagania"},{"location":"documentation/config/","text":"","title":"Config"},{"location":"documentation/controller/","text":"Controller Kontroler odpowiada za odbieranie danych od u\u017cytkownika, decydowanie o tym, co zrobi\u0107 z tymi danymi, a nast\u0119pnie delegowanie zada\u0144 do odpowiednich modeli lub wy\u015bwietlanie odpowiednich widok\u00f3w. Namespace Klasa: Nimblephp\\framework\\Controller Abstract: Nimblephp\\framework\\Abstracts\\AbstractController Zmienne public string $name : Nazwa za\u0142adowanego kontrolera. public string $action : Nazwa wywo\u0142anej akcji. public array $models : Lista za\u0142adowanych modeli. public ResponseInterface $response : Instancja Response public RequestInterface $request : Instancja Request Metody loadModel public function loadModel(string $name): AbstractModel Metoda loadModel s\u0142u\u017cy do \u0142adowania modelu na podstawie podanej nazwy. Po za\u0142adowaniu modelu znajduje si\u0119 on w tablicy $models oraz jest mo\u017cliwo\u015b\u0107 do odwo\u0142anai si\u0119 do niego za pomoc\u0105 zmiennej z CamelCase np.: $this->loadModel('testowy_model'); // odwo\u0142anie do modelu $this->TestowyModel->... log public function log(string $message, string $level = 'INFO', array $content = []): bool Dodanie loga afterConstruct public function afterConstruct(): void Metoda jest inicjowania po utworzeniu i skonfigurowaniu kontrolera w metodze loadController w Kernel PHPDoc Poni\u017cej znajduj\u0105 si\u0119 funkccje phpdoc dla kontrolera /** * @action false */ Pozwalaj\u0105 one na wy\u0142\u0105czenie akcji dla kontrolera, co oznacza, \u017ce nie mo\u017cna wywo\u0142a\u0107 tej akcji z poziomu przegl\u0105darki.","title":"Controller"},{"location":"documentation/controller/#controller","text":"Kontroler odpowiada za odbieranie danych od u\u017cytkownika, decydowanie o tym, co zrobi\u0107 z tymi danymi, a nast\u0119pnie delegowanie zada\u0144 do odpowiednich modeli lub wy\u015bwietlanie odpowiednich widok\u00f3w.","title":"Controller"},{"location":"documentation/controller/#namespace","text":"Klasa: Nimblephp\\framework\\Controller Abstract: Nimblephp\\framework\\Abstracts\\AbstractController","title":"Namespace"},{"location":"documentation/controller/#zmienne","text":"public string $name : Nazwa za\u0142adowanego kontrolera. public string $action : Nazwa wywo\u0142anej akcji. public array $models : Lista za\u0142adowanych modeli. public ResponseInterface $response : Instancja Response public RequestInterface $request : Instancja Request","title":"Zmienne"},{"location":"documentation/controller/#metody","text":"","title":"Metody"},{"location":"documentation/controller/#loadmodel","text":"public function loadModel(string $name): AbstractModel Metoda loadModel s\u0142u\u017cy do \u0142adowania modelu na podstawie podanej nazwy. Po za\u0142adowaniu modelu znajduje si\u0119 on w tablicy $models oraz jest mo\u017cliwo\u015b\u0107 do odwo\u0142anai si\u0119 do niego za pomoc\u0105 zmiennej z CamelCase np.: $this->loadModel('testowy_model'); // odwo\u0142anie do modelu $this->TestowyModel->...","title":"loadModel"},{"location":"documentation/controller/#log","text":"public function log(string $message, string $level = 'INFO', array $content = []): bool Dodanie loga","title":"log"},{"location":"documentation/controller/#afterconstruct","text":"public function afterConstruct(): void Metoda jest inicjowania po utworzeniu i skonfigurowaniu kontrolera w metodze loadController w Kernel","title":"afterConstruct"},{"location":"documentation/controller/#phpdoc","text":"Poni\u017cej znajduj\u0105 si\u0119 funkccje phpdoc dla kontrolera /** * @action false */ Pozwalaj\u0105 one na wy\u0142\u0105czenie akcji dla kontrolera, co oznacza, \u017ce nie mo\u017cna wywo\u0142a\u0107 tej akcji z poziomu przegl\u0105darki.","title":"PHPDoc"},{"location":"documentation/cookie/","text":"Cookie Cookie to komponent odpowiedzialny za zarz\u0105dzanie ciasteczkami w aplikacji. Zapewnia metody do ustawiania, pobierania, sprawdzania istnienia i usuwania ciasteczek, z mo\u017cliwo\u015bci\u0105 konfiguracji ich bezpiecze\u0144stwa i innych opcji. Namespace Klasa: Nimblephp\\framework\\Cookie Interfejs: Nimblephp\\framework\\Interfaces\\CookieInterface Zmienne protected static bool $defaultSecure : Domy\u015blne ustawienie bezpiecznego przesy\u0142ania ciasteczek (true albo false). protected static bool $defaultHttpOnly : Domy\u015blne ustawienie dost\u0119pno\u015bci ciasteczka tylko przez HTTP (true albo false). protected static string $sameSite : Domy\u015blna polityka dla atrybutu SameSite ciasteczka ('Lax', 'Strict', lub 'None'). Metody setSameSite public static function setSameSite(string $sameSite): void Ustawia polityk\u0119 SameSite dla ciasteczek. setDefaultSecure public static function setDefaultSecure(bool $defaultSecure): void Ustawia domy\u015blne bezpiecze\u0144stwo przesy\u0142ania ciasteczek. setDefaultHttpOnly public static function setDefaultHttpOnly(bool $defaultHttpOnly): void Ustawia domy\u015blne ustawienie dost\u0119pno\u015bci ciasteczka tylko przez HTTP. set public function set(string $name, mixed $value, int $expire = 0, string $path = '/', string $domain = '', ?bool $secure = null, ?bool $httponly = false): void Ustawia ciasteczko z okre\u015blon\u0105 nazw\u0105, warto\u015bci\u0105, czasem wyga\u015bni\u0119cia, \u015bcie\u017ck\u0105, domen\u0105, bezpiecze\u0144stwem i dost\u0119pno\u015bci\u0105 HTTP. get public function get(string $name): mixed Pobiera warto\u015b\u0107 ciasteczka o danej nazwie, zwraca null je\u015bli ciasteczko nie istnieje. exists public function exists(string $name): bool Sprawdza, czy ciasteczko o podanej nazwie istnieje. remove public function remove(string $name): void Usuwa ciasteczko o podanej nazwie.","title":"Cookie"},{"location":"documentation/cookie/#cookie","text":"Cookie to komponent odpowiedzialny za zarz\u0105dzanie ciasteczkami w aplikacji. Zapewnia metody do ustawiania, pobierania, sprawdzania istnienia i usuwania ciasteczek, z mo\u017cliwo\u015bci\u0105 konfiguracji ich bezpiecze\u0144stwa i innych opcji.","title":"Cookie"},{"location":"documentation/cookie/#namespace","text":"Klasa: Nimblephp\\framework\\Cookie Interfejs: Nimblephp\\framework\\Interfaces\\CookieInterface","title":"Namespace"},{"location":"documentation/cookie/#zmienne","text":"protected static bool $defaultSecure : Domy\u015blne ustawienie bezpiecznego przesy\u0142ania ciasteczek (true albo false). protected static bool $defaultHttpOnly : Domy\u015blne ustawienie dost\u0119pno\u015bci ciasteczka tylko przez HTTP (true albo false). protected static string $sameSite : Domy\u015blna polityka dla atrybutu SameSite ciasteczka ('Lax', 'Strict', lub 'None').","title":"Zmienne"},{"location":"documentation/cookie/#metody","text":"","title":"Metody"},{"location":"documentation/cookie/#setsamesite","text":"public static function setSameSite(string $sameSite): void Ustawia polityk\u0119 SameSite dla ciasteczek.","title":"setSameSite"},{"location":"documentation/cookie/#setdefaultsecure","text":"public static function setDefaultSecure(bool $defaultSecure): void Ustawia domy\u015blne bezpiecze\u0144stwo przesy\u0142ania ciasteczek.","title":"setDefaultSecure"},{"location":"documentation/cookie/#setdefaulthttponly","text":"public static function setDefaultHttpOnly(bool $defaultHttpOnly): void Ustawia domy\u015blne ustawienie dost\u0119pno\u015bci ciasteczka tylko przez HTTP.","title":"setDefaultHttpOnly"},{"location":"documentation/cookie/#set","text":"public function set(string $name, mixed $value, int $expire = 0, string $path = '/', string $domain = '', ?bool $secure = null, ?bool $httponly = false): void Ustawia ciasteczko z okre\u015blon\u0105 nazw\u0105, warto\u015bci\u0105, czasem wyga\u015bni\u0119cia, \u015bcie\u017ck\u0105, domen\u0105, bezpiecze\u0144stwem i dost\u0119pno\u015bci\u0105 HTTP.","title":"set"},{"location":"documentation/cookie/#get","text":"public function get(string $name): mixed Pobiera warto\u015b\u0107 ciasteczka o danej nazwie, zwraca null je\u015bli ciasteczko nie istnieje.","title":"get"},{"location":"documentation/cookie/#exists","text":"public function exists(string $name): bool Sprawdza, czy ciasteczko o podanej nazwie istnieje.","title":"exists"},{"location":"documentation/cookie/#remove","text":"public function remove(string $name): void Usuwa ciasteczko o podanej nazwie.","title":"remove"},{"location":"documentation/kernel/","text":"Kernel Kernel to g\u0142\u00f3wny komponent systemu, kt\u00f3ry koordynuje og\u00f3lne operacje aplikacji, takie jak obs\u0142uga \u017c\u0105da\u0144, routing, inicjalizacja konfiguracji i zarz\u0105dzanie po\u0142\u0105czeniami z baz\u0105 danych. Stanowi centralny punkt zarz\u0105dzania przep\u0142ywem aplikacji. Namespace Klasa: Nimblephp\\framework\\Kernel Interface: Nimblephp\\framework\\Interfaces\\KernelInterface Zmienne public static string $projectPath : Podstawowa \u015bcie\u017cka katalogu projektu. protected RouteInterface $router : Instancja routera obs\u0142uguj\u0105cego routing \u017c\u0105dania. protected RequestInterface $request : Instancja zarz\u0105dzaj\u0105ca \u017c\u0105daniami. protected ResponseInterface $response : Instancja zarz\u0105dzaj\u0105ca odpowiedziami. protected MiddlewareInterface $middleware : Instancja middleware. Metody Konstruktor public function __construct(RouteInterface $router) Inicjalizuje Kernel z podanym routerem, \u017c\u0105daniem i odpowiedzi\u0105. Ustawia tak\u017ce podstawow\u0105 \u015bcie\u017ck\u0119 projektu. getProjectPath protected function getProjectPath(): string Zwraca rzeczywist\u0105 \u015bcie\u017ck\u0119 katalogu projektu. handle public function handle(): void Uruchamia aplikacj\u0119, wykonuj\u0105c kolejno metod\u0119 bootstrap oraz loadController. Obs\u0142uguje tak\u017ce wyj\u0105tki zg\u0142aszane w tych metodach. loadConfiguration public function loadConfiguration(): void \u0141aduje konfiguracj\u0119 z plik\u00f3w .env, obs\u0142uguj\u0105c zar\u00f3wno domy\u015bln\u0105 konfiguracj\u0119 jak i specyficzn\u0105 dla \u015brodowiska. bootstrap protected function bootstrap(): void Inicjuje sesj\u0119, \u0142\u0105czy z baz\u0105 danych i wykonuje auto-loader klas. bootstrap protected function errorCatcher(): void Metoda ma wy\u0142apywa\u0107 i zapisywa\u0107 do log\u00f3w b\u0142\u0119dy autoCreator protected function autoCreator(): void Tworzy niezb\u0119dne katalogi w projekcie, je\u015bli nie istniej\u0105. initializeSession protected function initializeSession(): void Inicjalizuje sesj\u0119 u\u017cytkownika. connectToDatabase protected function connectToDatabase(): void \u0141\u0105czy z baz\u0105 danych, u\u017cywaj\u0105c konfiguracji z plik\u00f3w .env. autoloader protected function autoloader(): void Auto-loader dla klas projektu, \u0142aduje klasy na podstawie namespace. loadController protected function loadController(): void \u0141aduje i wykonuje kontroler na podstawie danych z routera. handleException protected function handleException(Throwable $exception): void Obs\u0142uguje wyj\u0105tki zg\u0142aszane podczas dzia\u0142ania aplikacji, loguj\u0105c je i w zale\u017cno\u015bci od konfiguracji, wy\u015bwietlaj\u0105c informacje o b\u0142\u0119dzie. debug protected function debug(): void Ustawienia dotycz\u0105ce wy\u015bwietlania b\u0142\u0119d\u00f3w, je\u015bli opcja debugowania jest w\u0142\u0105czona. loadModules protected function loadModules(): void Za\u0142adowywanie oraz pocz\u0105tkowa inicjalizacja modu\u0142\u00f3w","title":"Kernel"},{"location":"documentation/kernel/#kernel","text":"Kernel to g\u0142\u00f3wny komponent systemu, kt\u00f3ry koordynuje og\u00f3lne operacje aplikacji, takie jak obs\u0142uga \u017c\u0105da\u0144, routing, inicjalizacja konfiguracji i zarz\u0105dzanie po\u0142\u0105czeniami z baz\u0105 danych. Stanowi centralny punkt zarz\u0105dzania przep\u0142ywem aplikacji.","title":"Kernel"},{"location":"documentation/kernel/#namespace","text":"Klasa: Nimblephp\\framework\\Kernel Interface: Nimblephp\\framework\\Interfaces\\KernelInterface","title":"Namespace"},{"location":"documentation/kernel/#zmienne","text":"public static string $projectPath : Podstawowa \u015bcie\u017cka katalogu projektu. protected RouteInterface $router : Instancja routera obs\u0142uguj\u0105cego routing \u017c\u0105dania. protected RequestInterface $request : Instancja zarz\u0105dzaj\u0105ca \u017c\u0105daniami. protected ResponseInterface $response : Instancja zarz\u0105dzaj\u0105ca odpowiedziami. protected MiddlewareInterface $middleware : Instancja middleware.","title":"Zmienne"},{"location":"documentation/kernel/#metody","text":"","title":"Metody"},{"location":"documentation/kernel/#konstruktor","text":"public function __construct(RouteInterface $router) Inicjalizuje Kernel z podanym routerem, \u017c\u0105daniem i odpowiedzi\u0105. Ustawia tak\u017ce podstawow\u0105 \u015bcie\u017ck\u0119 projektu.","title":"Konstruktor"},{"location":"documentation/kernel/#getprojectpath","text":"protected function getProjectPath(): string Zwraca rzeczywist\u0105 \u015bcie\u017ck\u0119 katalogu projektu.","title":"getProjectPath"},{"location":"documentation/kernel/#handle","text":"public function handle(): void Uruchamia aplikacj\u0119, wykonuj\u0105c kolejno metod\u0119 bootstrap oraz loadController. Obs\u0142uguje tak\u017ce wyj\u0105tki zg\u0142aszane w tych metodach.","title":"handle"},{"location":"documentation/kernel/#loadconfiguration","text":"public function loadConfiguration(): void \u0141aduje konfiguracj\u0119 z plik\u00f3w .env, obs\u0142uguj\u0105c zar\u00f3wno domy\u015bln\u0105 konfiguracj\u0119 jak i specyficzn\u0105 dla \u015brodowiska.","title":"loadConfiguration"},{"location":"documentation/kernel/#bootstrap","text":"protected function bootstrap(): void Inicjuje sesj\u0119, \u0142\u0105czy z baz\u0105 danych i wykonuje auto-loader klas.","title":"bootstrap"},{"location":"documentation/kernel/#bootstrap_1","text":"protected function errorCatcher(): void Metoda ma wy\u0142apywa\u0107 i zapisywa\u0107 do log\u00f3w b\u0142\u0119dy","title":"bootstrap"},{"location":"documentation/kernel/#autocreator","text":"protected function autoCreator(): void Tworzy niezb\u0119dne katalogi w projekcie, je\u015bli nie istniej\u0105.","title":"autoCreator"},{"location":"documentation/kernel/#initializesession","text":"protected function initializeSession(): void Inicjalizuje sesj\u0119 u\u017cytkownika.","title":"initializeSession"},{"location":"documentation/kernel/#connecttodatabase","text":"protected function connectToDatabase(): void \u0141\u0105czy z baz\u0105 danych, u\u017cywaj\u0105c konfiguracji z plik\u00f3w .env.","title":"connectToDatabase"},{"location":"documentation/kernel/#autoloader","text":"protected function autoloader(): void Auto-loader dla klas projektu, \u0142aduje klasy na podstawie namespace.","title":"autoloader"},{"location":"documentation/kernel/#loadcontroller","text":"protected function loadController(): void \u0141aduje i wykonuje kontroler na podstawie danych z routera.","title":"loadController"},{"location":"documentation/kernel/#handleexception","text":"protected function handleException(Throwable $exception): void Obs\u0142uguje wyj\u0105tki zg\u0142aszane podczas dzia\u0142ania aplikacji, loguj\u0105c je i w zale\u017cno\u015bci od konfiguracji, wy\u015bwietlaj\u0105c informacje o b\u0142\u0119dzie.","title":"handleException"},{"location":"documentation/kernel/#debug","text":"protected function debug(): void Ustawienia dotycz\u0105ce wy\u015bwietlania b\u0142\u0119d\u00f3w, je\u015bli opcja debugowania jest w\u0142\u0105czona.","title":"debug"},{"location":"documentation/kernel/#loadmodules","text":"protected function loadModules(): void Za\u0142adowywanie oraz pocz\u0105tkowa inicjalizacja modu\u0142\u00f3w","title":"loadModules"},{"location":"documentation/log/","text":"Log Klasa s\u0142u\u017cy do logowania zdarze\u0144 w aplikacji. Namespace Klasa: Nimblephp\\framework\\Log Zmienne public static string $session : Unikatowy identyfikator sesji, generowany dla ka\u017cdej sesji logowania. Metody log public static function log(string $message, string $level = 'INFO', array $content = []): bool Metoda do zapisywania log\u00f3w. Pozwala na zapisanie wiadomo\u015bci logu, poziomu logowania oraz dodatkowych tre\u015bci. Log jest zapisywany tylko je\u015bli w konfiguracji aplikacji w\u0142\u0105czone jest logowanie. Generuje unikatowy identyfikator sesji, je\u015bli nie istnieje. Formatuje i zapisuje dane logu w pliku JSON w katalogu log\u00f3w projektu. Zwraca true , je\u015bli zapis si\u0119 powi\u00f3d\u0142, lub false w przypadku niepowodzenia.","title":"Log"},{"location":"documentation/log/#log","text":"Klasa s\u0142u\u017cy do logowania zdarze\u0144 w aplikacji.","title":"Log"},{"location":"documentation/log/#namespace","text":"Klasa: Nimblephp\\framework\\Log","title":"Namespace"},{"location":"documentation/log/#zmienne","text":"public static string $session : Unikatowy identyfikator sesji, generowany dla ka\u017cdej sesji logowania.","title":"Zmienne"},{"location":"documentation/log/#metody","text":"","title":"Metody"},{"location":"documentation/log/#log_1","text":"public static function log(string $message, string $level = 'INFO', array $content = []): bool Metoda do zapisywania log\u00f3w. Pozwala na zapisanie wiadomo\u015bci logu, poziomu logowania oraz dodatkowych tre\u015bci. Log jest zapisywany tylko je\u015bli w konfiguracji aplikacji w\u0142\u0105czone jest logowanie. Generuje unikatowy identyfikator sesji, je\u015bli nie istnieje. Formatuje i zapisuje dane logu w pliku JSON w katalogu log\u00f3w projektu. Zwraca true , je\u015bli zapis si\u0119 powi\u00f3d\u0142, lub false w przypadku niepowodzenia.","title":"log"},{"location":"documentation/middleware/","text":"Middleware Klasa \u0142aduj\u0105ce skrypty u\u017cytkownika do kernel'a U\u017cywanie klasy Aby u\u017cy\u0107 klasy nale\u017cy w g\u0142\u00f3wnym folderze utworzy\u0107 plik Middleware.php o nast\u0119puj\u0105cym szablonie klasy: <?php class Middleware extends \\Nimblephp\\framework\\Middleware { } lub z interfejsu class Middleware implements \\Nimblephp\\framework\\Interfaces\\MiddlewareInterface { public function afterBootstrap() { } public function beforeController(string $controllerName, string $action, array $params) { } public function afterController(string $controllerName, string $action, array $params) { } public function handleException(Throwable $exception) { } } Namespace Klasa: Nimblephp\\framework\\Middleware Interface: Nimblephp\\framework\\Interfaces\\MiddlewareInterface Metody afterBootstrap public function afterBootstrap() Kod wykonywany po za\u0142adowaniu kodu przez bootstrap beforeController public function beforeController(string $controllerName, string $action, array $params) Kod wykonywany przed za\u0142adowaniem kontrolera afterController public function afterController(string $controllerName, string $action, array $params) Kod wykonywany po za\u0142adowaniu kontrolera handleException public function handleException(Throwable $exception) Kod wykonuje si\u0119 na ko\u0144cu handleException, po zapisaniu logu","title":"Middleware"},{"location":"documentation/middleware/#middleware","text":"Klasa \u0142aduj\u0105ce skrypty u\u017cytkownika do kernel'a","title":"Middleware"},{"location":"documentation/middleware/#uzywanie-klasy","text":"Aby u\u017cy\u0107 klasy nale\u017cy w g\u0142\u00f3wnym folderze utworzy\u0107 plik Middleware.php o nast\u0119puj\u0105cym szablonie klasy: <?php class Middleware extends \\Nimblephp\\framework\\Middleware { } lub z interfejsu class Middleware implements \\Nimblephp\\framework\\Interfaces\\MiddlewareInterface { public function afterBootstrap() { } public function beforeController(string $controllerName, string $action, array $params) { } public function afterController(string $controllerName, string $action, array $params) { } public function handleException(Throwable $exception) { } }","title":"U\u017cywanie klasy"},{"location":"documentation/middleware/#namespace","text":"Klasa: Nimblephp\\framework\\Middleware Interface: Nimblephp\\framework\\Interfaces\\MiddlewareInterface","title":"Namespace"},{"location":"documentation/middleware/#metody","text":"","title":"Metody"},{"location":"documentation/middleware/#afterbootstrap","text":"public function afterBootstrap() Kod wykonywany po za\u0142adowaniu kodu przez bootstrap","title":"afterBootstrap"},{"location":"documentation/middleware/#beforecontroller","text":"public function beforeController(string $controllerName, string $action, array $params) Kod wykonywany przed za\u0142adowaniem kontrolera","title":"beforeController"},{"location":"documentation/middleware/#aftercontroller","text":"public function afterController(string $controllerName, string $action, array $params) Kod wykonywany po za\u0142adowaniu kontrolera","title":"afterController"},{"location":"documentation/middleware/#handleexception","text":"public function handleException(Throwable $exception) Kod wykonuje si\u0119 na ko\u0144cu handleException, po zapisaniu logu","title":"handleException"},{"location":"documentation/model/","text":"Model Model to g\u0142\u00f3wna cz\u0119\u015b\u0107 systemu odpowiadaj\u0105ca za logik\u0119 biznesow\u0105 i zarz\u0105dzanie danymi. Jego zadaniem jest przechowywanie danych, ich przetwarzanie i dostarczanie ich w odpowiedniej formie do kontrolera. Namespace Klasa: Nimblephp\\framework\\Model Abstract: Nimblephp\\framework\\Abstracts\\AbstractModel Interface: Nimblephp\\framework\\Interfaces\\ModelInterface Zmienne public null|string|false $useTable : Nazwa tabeli w bazie danych u\u017cywana przez model, null oznacza automatyczne ustalenie nazwy, false deaktywuje dzia\u0142anie z baz\u0105 danych. public string $name : Nazwa modelu. public array $models : Lista za\u0142adowanych modeli. public ControllerInterface $controller : Instancja kontrolera kt\u00f3ry za\u0142adowa\u0142 model protected Table $table : Instancja tabeli obs\u0142uguj\u0105cej operacje na bazie danych. protected ?int $id : Aktualne ID elementu w bazie danych. Metody create public function create(array $data): bool Tworzy nowy rekord w bazie danych na podstawie dostarczonych danych. Rzuca DatabaseException je\u015bli operacja nie powiedzie si\u0119. read public function read(?array $condition = null, ?array $columns = null, ?string $orderBy = null): array Zwraca pojedynczy rekord na podstawie podanych warunk\u00f3w. Rzuca DatabaseException przy b\u0142\u0119dzie. readAll public function readAll(?array $condition = null, ?array $columns = null, ?string $orderBy = null, ?string $limit = null, ?string $groupBy = null): array Zwraca list\u0119 rekord\u00f3w spe\u0142niaj\u0105cych podane warunki. Rzuca DatabaseException przy b\u0142\u0119dzie. update public function update(array $data): bool Aktualizuje rekord o danym ID, u\u017cywaj\u0105c dostarczonych danych. Rzuca DatabaseException je\u015bli operacja nie powiedzie si\u0119. delete public function delete(): bool Usuwa rekord o danym ID. Rzuca DatabaseException je\u015bli operacja nie powiedzie si\u0119. count public function count(?array $condition = null, ?string $groupBy = null): int Zliczenie ilo\u015bci rekord\u00f3w. Rzuca DatabaseException je\u015bli operacja nie powiedzie si\u0119. isset public function isset(?array $condition = null): int Weryfikacja czy element istnieje. Rzuca DatabaseException je\u015bli operacja nie powiedzie si\u0119. query public function query(?string $sql): array Wykonanie kodu SQL. Rzuca DatabaseException je\u015bli operacja nie powiedzie si\u0119. getId public function getId(): ?int Zwraca ID aktualnie zarz\u0105dzanego elementu. setId public function setId(?int $id = null): ModelInterface Ustawia ID dla aktualnie zarz\u0105dzanego elementu, zwraca sam\u0105 siebie. prepareTableInstance public function prepareTableInstance(): void Przygotowuje instancj\u0119 tabeli, na kt\u00f3rej b\u0119d\u0105 wykonywane operacje. getTableInstance public function getTableInstance(): Table Pobranie instancji tabeli loadModel public function loadModel(string $name): AbstractModel Metoda loadModel s\u0142u\u017cy do \u0142adowania modelu na podstawie podanej nazwy. Po za\u0142adowaniu modelu znajduje si\u0119 on w tablicy $models oraz jest mo\u017cliwo\u015b\u0107 do odwo\u0142anai si\u0119 do niego za pomoc\u0105 zmiennej z CamelCase np.: $this->loadModel('testowy_model'); // odwo\u0142anie do modelu $this->TestowyModel->... log public function log(string $message, string $level = 'INFO', array $content = []): bool Dodanie loga","title":"Model"},{"location":"documentation/model/#model","text":"Model to g\u0142\u00f3wna cz\u0119\u015b\u0107 systemu odpowiadaj\u0105ca za logik\u0119 biznesow\u0105 i zarz\u0105dzanie danymi. Jego zadaniem jest przechowywanie danych, ich przetwarzanie i dostarczanie ich w odpowiedniej formie do kontrolera.","title":"Model"},{"location":"documentation/model/#namespace","text":"Klasa: Nimblephp\\framework\\Model Abstract: Nimblephp\\framework\\Abstracts\\AbstractModel Interface: Nimblephp\\framework\\Interfaces\\ModelInterface","title":"Namespace"},{"location":"documentation/model/#zmienne","text":"public null|string|false $useTable : Nazwa tabeli w bazie danych u\u017cywana przez model, null oznacza automatyczne ustalenie nazwy, false deaktywuje dzia\u0142anie z baz\u0105 danych. public string $name : Nazwa modelu. public array $models : Lista za\u0142adowanych modeli. public ControllerInterface $controller : Instancja kontrolera kt\u00f3ry za\u0142adowa\u0142 model protected Table $table : Instancja tabeli obs\u0142uguj\u0105cej operacje na bazie danych. protected ?int $id : Aktualne ID elementu w bazie danych.","title":"Zmienne"},{"location":"documentation/model/#metody","text":"","title":"Metody"},{"location":"documentation/model/#create","text":"public function create(array $data): bool Tworzy nowy rekord w bazie danych na podstawie dostarczonych danych. Rzuca DatabaseException je\u015bli operacja nie powiedzie si\u0119.","title":"create"},{"location":"documentation/model/#read","text":"public function read(?array $condition = null, ?array $columns = null, ?string $orderBy = null): array Zwraca pojedynczy rekord na podstawie podanych warunk\u00f3w. Rzuca DatabaseException przy b\u0142\u0119dzie.","title":"read"},{"location":"documentation/model/#readall","text":"public function readAll(?array $condition = null, ?array $columns = null, ?string $orderBy = null, ?string $limit = null, ?string $groupBy = null): array Zwraca list\u0119 rekord\u00f3w spe\u0142niaj\u0105cych podane warunki. Rzuca DatabaseException przy b\u0142\u0119dzie.","title":"readAll"},{"location":"documentation/model/#update","text":"public function update(array $data): bool Aktualizuje rekord o danym ID, u\u017cywaj\u0105c dostarczonych danych. Rzuca DatabaseException je\u015bli operacja nie powiedzie si\u0119.","title":"update"},{"location":"documentation/model/#delete","text":"public function delete(): bool Usuwa rekord o danym ID. Rzuca DatabaseException je\u015bli operacja nie powiedzie si\u0119.","title":"delete"},{"location":"documentation/model/#count","text":"public function count(?array $condition = null, ?string $groupBy = null): int Zliczenie ilo\u015bci rekord\u00f3w. Rzuca DatabaseException je\u015bli operacja nie powiedzie si\u0119.","title":"count"},{"location":"documentation/model/#isset","text":"public function isset(?array $condition = null): int Weryfikacja czy element istnieje. Rzuca DatabaseException je\u015bli operacja nie powiedzie si\u0119.","title":"isset"},{"location":"documentation/model/#query","text":"public function query(?string $sql): array Wykonanie kodu SQL. Rzuca DatabaseException je\u015bli operacja nie powiedzie si\u0119.","title":"query"},{"location":"documentation/model/#getid","text":"public function getId(): ?int Zwraca ID aktualnie zarz\u0105dzanego elementu.","title":"getId"},{"location":"documentation/model/#setid","text":"public function setId(?int $id = null): ModelInterface Ustawia ID dla aktualnie zarz\u0105dzanego elementu, zwraca sam\u0105 siebie.","title":"setId"},{"location":"documentation/model/#preparetableinstance","text":"public function prepareTableInstance(): void Przygotowuje instancj\u0119 tabeli, na kt\u00f3rej b\u0119d\u0105 wykonywane operacje.","title":"prepareTableInstance"},{"location":"documentation/model/#gettableinstance","text":"public function getTableInstance(): Table Pobranie instancji tabeli","title":"getTableInstance"},{"location":"documentation/model/#loadmodel","text":"public function loadModel(string $name): AbstractModel Metoda loadModel s\u0142u\u017cy do \u0142adowania modelu na podstawie podanej nazwy. Po za\u0142adowaniu modelu znajduje si\u0119 on w tablicy $models oraz jest mo\u017cliwo\u015b\u0107 do odwo\u0142anai si\u0119 do niego za pomoc\u0105 zmiennej z CamelCase np.: $this->loadModel('testowy_model'); // odwo\u0142anie do modelu $this->TestowyModel->...","title":"loadModel"},{"location":"documentation/model/#log","text":"public function log(string $message, string $level = 'INFO', array $content = []): bool Dodanie loga","title":"log"},{"location":"documentation/module_register/","text":"ModuleRegister Klasa do zarz\u0105dzania modu\u0142ami Namespace Klasa: Nimblephp\\framework\\ModuleRegister Zmienne private static array $modules = [] : Lista modu\u0142\u00f3w Metody statyczne register public static function register( string $name, array $config = [], ?string $namespace = null, ?array $classes = null ): void Rejestracja nowego modu\u0142u get public static function get(string $name): array Pobranie wpisu z rejestru isset public static function isset(string $name): bool Sprawdzenie czy modu\u0142 jest za\u0142adowany getAll public static function getAll(): array Pobranie wszystkich za\u0142adowanych modu\u0142\u00f3w moduleExistsInVendor public static function moduleExistsInVendor(string $name): bool Sprawdzenie czy modu\u0142 istnieje w vendorze composera Metody autoRegister public function autoRegister(): void Automatyczne \u0142adowanie modu\u0142\u00f3w z vendor composera","title":"ModuleRegister"},{"location":"documentation/module_register/#moduleregister","text":"Klasa do zarz\u0105dzania modu\u0142ami","title":"ModuleRegister"},{"location":"documentation/module_register/#namespace","text":"Klasa: Nimblephp\\framework\\ModuleRegister","title":"Namespace"},{"location":"documentation/module_register/#zmienne","text":"private static array $modules = [] : Lista modu\u0142\u00f3w","title":"Zmienne"},{"location":"documentation/module_register/#metody-statyczne","text":"","title":"Metody statyczne"},{"location":"documentation/module_register/#register","text":"public static function register( string $name, array $config = [], ?string $namespace = null, ?array $classes = null ): void Rejestracja nowego modu\u0142u","title":"register"},{"location":"documentation/module_register/#get","text":"public static function get(string $name): array Pobranie wpisu z rejestru","title":"get"},{"location":"documentation/module_register/#isset","text":"public static function isset(string $name): bool Sprawdzenie czy modu\u0142 jest za\u0142adowany","title":"isset"},{"location":"documentation/module_register/#getall","text":"public static function getAll(): array Pobranie wszystkich za\u0142adowanych modu\u0142\u00f3w","title":"getAll"},{"location":"documentation/module_register/#moduleexistsinvendor","text":"public static function moduleExistsInVendor(string $name): bool Sprawdzenie czy modu\u0142 istnieje w vendorze composera","title":"moduleExistsInVendor"},{"location":"documentation/module_register/#metody","text":"","title":"Metody"},{"location":"documentation/module_register/#autoregister","text":"public function autoRegister(): void Automatyczne \u0142adowanie modu\u0142\u00f3w z vendor composera","title":"autoRegister"},{"location":"documentation/request/","text":"Request Klasa s\u0142u\u017cy do obs\u0142ugi \u017c\u0105da\u0144 HTTP. Namespace Klasa: Nimblephp\\framework\\Request Interface: Nimblephp\\framework\\Interfaces\\RequestInterface Zmienne private array $query : Dane przes\u0142ane metod\u0105 GET. private array $post : Dane przes\u0142ane metod\u0105 POST. private array $cookies : Ciasteczka HTTP \u017c\u0105dania. private array $files : Pliki przes\u0142ane w ramach \u017c\u0105dania. private array $headers : Nag\u0142\u00f3wki HTTP \u017c\u0105dania. private array $server : Informacje o serwerze i \u015brodowisku wykonania \u017c\u0105dania. Metody __construct __construct() Konstruktor klasy, inicjalizuje zmienne przechowuj\u0105ce dane \u017c\u0105dania. getAllHeaders private function getAllHeaders(): array Pobiera wszystkie nag\u0142\u00f3wki HTTP \u017c\u0105dania. getAllQuery public function getQuery($key, $default = null, bool $protect = true): mixed Pobranie wszystkich warto\u015bci przekazanej metod\u0105 GET. $protect - zabezpieczenie danych za pomoc\u0105 htmlspecialchars getQuery public function getQuery($key, $default = null, bool $protect = true): mixed Pobranie warto\u015bci przekazanej metod\u0105 GET. $protect - zabezpieczenie danych za pomoc\u0105 htmlspecialchars issetQuery public function issetQuery($key): bool Sprawdzenie czy zmienna przekazana metod\u0105 GET istnieje. getAllPost public function getAllPost(bool $protect = true): mixed Pobranie warto\u015bci przekazanej metod\u0105 POST. $protect - zabezpieczenie danych za pomoc\u0105 htmlspecialchars getPost public function getPost($key, $default = null, bool $protect = true): mixed Pobranie warto\u015bci przekazanej metod\u0105 POST. $protect - zabezpieczenie danych za pomoc\u0105 htmlspecialchars issetPost public function issetPost($key): bool Sprawdzenie czy zmienna przekazana metod\u0105 POST istnieje. getCookie public function getCookie($key, $default = null, bool $protect = true)): mixed Pobranie warto\u015bci ciasteczka. $protect - zabezpieczenie danych za pomoc\u0105 htmlspecialchars issetCookie public function issetCookie($key): bool Sprawdzenie czy zmienna przekazana metod\u0105 COOKIE istnieje. getFile public function getFile($key): mixed Pobranie przes\u0142anego pliku. getHeader public function getHeader($key): mixed Pobranie warto\u015bci nag\u0142\u00f3wka. getBody public function getBody(): string Zwraca przes\u0142an\u0105 tre\u015b\u0107. getMethod public function getMethod(): string Pobranie metody HTTP \u017c\u0105dania. getUri public function getUri(): string Pobranie URI \u017c\u0105dania. getServer public function getServer($key, $default = null): mixed Pobranie informacji o serwerze lub \u015brodowisku. getBody public function getBody(): string Zwraca otrzymane body isAjax public function isAjax(): string Czy zapytanie jest ajaxowe","title":"Request"},{"location":"documentation/request/#request","text":"Klasa s\u0142u\u017cy do obs\u0142ugi \u017c\u0105da\u0144 HTTP.","title":"Request"},{"location":"documentation/request/#namespace","text":"Klasa: Nimblephp\\framework\\Request Interface: Nimblephp\\framework\\Interfaces\\RequestInterface","title":"Namespace"},{"location":"documentation/request/#zmienne","text":"private array $query : Dane przes\u0142ane metod\u0105 GET. private array $post : Dane przes\u0142ane metod\u0105 POST. private array $cookies : Ciasteczka HTTP \u017c\u0105dania. private array $files : Pliki przes\u0142ane w ramach \u017c\u0105dania. private array $headers : Nag\u0142\u00f3wki HTTP \u017c\u0105dania. private array $server : Informacje o serwerze i \u015brodowisku wykonania \u017c\u0105dania.","title":"Zmienne"},{"location":"documentation/request/#metody","text":"","title":"Metody"},{"location":"documentation/request/#__construct","text":"__construct() Konstruktor klasy, inicjalizuje zmienne przechowuj\u0105ce dane \u017c\u0105dania.","title":"__construct"},{"location":"documentation/request/#getallheaders","text":"private function getAllHeaders(): array Pobiera wszystkie nag\u0142\u00f3wki HTTP \u017c\u0105dania.","title":"getAllHeaders"},{"location":"documentation/request/#getallquery","text":"public function getQuery($key, $default = null, bool $protect = true): mixed Pobranie wszystkich warto\u015bci przekazanej metod\u0105 GET. $protect - zabezpieczenie danych za pomoc\u0105 htmlspecialchars","title":"getAllQuery"},{"location":"documentation/request/#getquery","text":"public function getQuery($key, $default = null, bool $protect = true): mixed Pobranie warto\u015bci przekazanej metod\u0105 GET. $protect - zabezpieczenie danych za pomoc\u0105 htmlspecialchars","title":"getQuery"},{"location":"documentation/request/#issetquery","text":"public function issetQuery($key): bool Sprawdzenie czy zmienna przekazana metod\u0105 GET istnieje.","title":"issetQuery"},{"location":"documentation/request/#getallpost","text":"public function getAllPost(bool $protect = true): mixed Pobranie warto\u015bci przekazanej metod\u0105 POST. $protect - zabezpieczenie danych za pomoc\u0105 htmlspecialchars","title":"getAllPost"},{"location":"documentation/request/#getpost","text":"public function getPost($key, $default = null, bool $protect = true): mixed Pobranie warto\u015bci przekazanej metod\u0105 POST. $protect - zabezpieczenie danych za pomoc\u0105 htmlspecialchars","title":"getPost"},{"location":"documentation/request/#issetpost","text":"public function issetPost($key): bool Sprawdzenie czy zmienna przekazana metod\u0105 POST istnieje.","title":"issetPost"},{"location":"documentation/request/#getcookie","text":"public function getCookie($key, $default = null, bool $protect = true)): mixed Pobranie warto\u015bci ciasteczka. $protect - zabezpieczenie danych za pomoc\u0105 htmlspecialchars","title":"getCookie"},{"location":"documentation/request/#issetcookie","text":"public function issetCookie($key): bool Sprawdzenie czy zmienna przekazana metod\u0105 COOKIE istnieje.","title":"issetCookie"},{"location":"documentation/request/#getfile","text":"public function getFile($key): mixed Pobranie przes\u0142anego pliku.","title":"getFile"},{"location":"documentation/request/#getheader","text":"public function getHeader($key): mixed Pobranie warto\u015bci nag\u0142\u00f3wka.","title":"getHeader"},{"location":"documentation/request/#getbody","text":"public function getBody(): string Zwraca przes\u0142an\u0105 tre\u015b\u0107.","title":"getBody"},{"location":"documentation/request/#getmethod","text":"public function getMethod(): string Pobranie metody HTTP \u017c\u0105dania.","title":"getMethod"},{"location":"documentation/request/#geturi","text":"public function getUri(): string Pobranie URI \u017c\u0105dania.","title":"getUri"},{"location":"documentation/request/#getserver","text":"public function getServer($key, $default = null): mixed Pobranie informacji o serwerze lub \u015brodowisku.","title":"getServer"},{"location":"documentation/request/#getbody_1","text":"public function getBody(): string Zwraca otrzymane body","title":"getBody"},{"location":"documentation/request/#isajax","text":"public function isAjax(): string Czy zapytanie jest ajaxowe","title":"isAjax"},{"location":"documentation/response/","text":"Response Klasa s\u0142u\u017cy do obs\u0142ugi odpowiedzi HTTP. Namespace Klasa: Nimblephp\\framework\\Response Interface: Nimblephp\\framework\\Interfaces\\ResponseInterface Zmienne protected mixed $content : Tre\u015b\u0107 odpowiedzi, mo\u017ce by\u0107 r\u00f3\u017cnego typu. protected int $statusCode = 200 : Kod statusu HTTP odpowiedzi, domy\u015blnie 200. protected array $headers = [] : Tablica nag\u0142\u00f3wk\u00f3w HTTP odpowiedzi. protected string $statusText = '' : Tekstowy opis kodu statusu HTTP. protected RequestInterface $request : Instancja klasy Request Metody __construct __construct() Konstruktor klasy, nie jest zdefiniowany w podanym kodzie. getContent public function getContent(): string Pobranie tre\u015bci odpowiedzi. setContent public function setContent(mixed $content): void Ustawienie tre\u015bci odpowiedzi. getStatusCode public function getStatusCode(): int Pobranie kodu statusu HTTP. setStatusCode public function setStatusCode(int $code, string $text = ''): void Ustawienie kodu statusu HTTP i opcjonalnie tekstowego opisu. addHeader public function addHeader(string $name, string $value): void Dodanie nag\u0142\u00f3wka HTTP do odpowiedzi. send public function send(bool $flush = false): void Wys\u0142anie odpowiedzi do klienta, wraz z nag\u0142\u00f3wkami i tre\u015bci\u0105. $flush - pozwala od razu zwr\u00f3ci\u0107 tre\u015b\u0107 wraz z exitem i wyczyszczeniem poprzedniej tre\u015bci redirect public function redirect(string $url, int $statusCode = 302): never Przekierowanie na inn\u0105 stron\u0119. Je\u017celi zapytanie jest ajaxowe, zwracana tre\u015b\u0107 ze statusem 200 to: { \"type\" : \"redirect\" , \"url\" : \"<url>\" }","title":"Response"},{"location":"documentation/response/#response","text":"Klasa s\u0142u\u017cy do obs\u0142ugi odpowiedzi HTTP.","title":"Response"},{"location":"documentation/response/#namespace","text":"Klasa: Nimblephp\\framework\\Response Interface: Nimblephp\\framework\\Interfaces\\ResponseInterface","title":"Namespace"},{"location":"documentation/response/#zmienne","text":"protected mixed $content : Tre\u015b\u0107 odpowiedzi, mo\u017ce by\u0107 r\u00f3\u017cnego typu. protected int $statusCode = 200 : Kod statusu HTTP odpowiedzi, domy\u015blnie 200. protected array $headers = [] : Tablica nag\u0142\u00f3wk\u00f3w HTTP odpowiedzi. protected string $statusText = '' : Tekstowy opis kodu statusu HTTP. protected RequestInterface $request : Instancja klasy Request","title":"Zmienne"},{"location":"documentation/response/#metody","text":"","title":"Metody"},{"location":"documentation/response/#__construct","text":"__construct() Konstruktor klasy, nie jest zdefiniowany w podanym kodzie.","title":"__construct"},{"location":"documentation/response/#getcontent","text":"public function getContent(): string Pobranie tre\u015bci odpowiedzi.","title":"getContent"},{"location":"documentation/response/#setcontent","text":"public function setContent(mixed $content): void Ustawienie tre\u015bci odpowiedzi.","title":"setContent"},{"location":"documentation/response/#getstatuscode","text":"public function getStatusCode(): int Pobranie kodu statusu HTTP.","title":"getStatusCode"},{"location":"documentation/response/#setstatuscode","text":"public function setStatusCode(int $code, string $text = ''): void Ustawienie kodu statusu HTTP i opcjonalnie tekstowego opisu.","title":"setStatusCode"},{"location":"documentation/response/#addheader","text":"public function addHeader(string $name, string $value): void Dodanie nag\u0142\u00f3wka HTTP do odpowiedzi.","title":"addHeader"},{"location":"documentation/response/#send","text":"public function send(bool $flush = false): void Wys\u0142anie odpowiedzi do klienta, wraz z nag\u0142\u00f3wkami i tre\u015bci\u0105. $flush - pozwala od razu zwr\u00f3ci\u0107 tre\u015b\u0107 wraz z exitem i wyczyszczeniem poprzedniej tre\u015bci","title":"send"},{"location":"documentation/response/#redirect","text":"public function redirect(string $url, int $statusCode = 302): never Przekierowanie na inn\u0105 stron\u0119. Je\u017celi zapytanie jest ajaxowe, zwracana tre\u015b\u0107 ze statusem 200 to: { \"type\" : \"redirect\" , \"url\" : \"<url>\" }","title":"redirect"},{"location":"documentation/route/","text":"Route Klasa s\u0142u\u017cy do interpretacji \u017c\u0105da\u0144 URL. Namespace Klasa: Nimblephp\\framework\\Route Interface: Nimblephp\\framework\\Interfaces\\RouteInterface Zmienne protected ?string $controller' : Nazwa kontrolera. protected ?string $method : Nazwa metody. protected array $params = [] : Parametry. Zmienne statyczne protected static array $routes = [] : Predefiniowane routingi Metody statyczne addRoute public static function addRoute(string $name, ?string $controller = null, ?string $method = null): void Dodanie predefiniowanych routing\u00f3w Metody __construct __construct(RequestInterface $request) Tworzenie instancji routingu. getController public function getController(): string Pobranie nazwy kontrolera. setController public function setController(?string $controller): void Zmiana nazwy kontrolera. getMethod public function getMethod(): string Pobranie nazwy metody. setMethod public function setMethod(?string $method): void Zmiana nazwy metody. getParams public function getParams(): array Pobranie parametr\u00f3w. setParams public function setParams(array $params): void Zmiana parametr\u00f3w. reload public function reload(): void Prze\u0142adowanie routingu w celu zastosowanie predefiniowanych routing\u00f3w","title":"Route"},{"location":"documentation/route/#route","text":"Klasa s\u0142u\u017cy do interpretacji \u017c\u0105da\u0144 URL.","title":"Route"},{"location":"documentation/route/#namespace","text":"Klasa: Nimblephp\\framework\\Route Interface: Nimblephp\\framework\\Interfaces\\RouteInterface","title":"Namespace"},{"location":"documentation/route/#zmienne","text":"protected ?string $controller' : Nazwa kontrolera. protected ?string $method : Nazwa metody. protected array $params = [] : Parametry.","title":"Zmienne"},{"location":"documentation/route/#zmienne-statyczne","text":"protected static array $routes = [] : Predefiniowane routingi","title":"Zmienne statyczne"},{"location":"documentation/route/#metody-statyczne","text":"","title":"Metody statyczne"},{"location":"documentation/route/#addroute","text":"public static function addRoute(string $name, ?string $controller = null, ?string $method = null): void Dodanie predefiniowanych routing\u00f3w","title":"addRoute"},{"location":"documentation/route/#metody","text":"","title":"Metody"},{"location":"documentation/route/#__construct","text":"__construct(RequestInterface $request) Tworzenie instancji routingu.","title":"__construct"},{"location":"documentation/route/#getcontroller","text":"public function getController(): string Pobranie nazwy kontrolera.","title":"getController"},{"location":"documentation/route/#setcontroller","text":"public function setController(?string $controller): void Zmiana nazwy kontrolera.","title":"setController"},{"location":"documentation/route/#getmethod","text":"public function getMethod(): string Pobranie nazwy metody.","title":"getMethod"},{"location":"documentation/route/#setmethod","text":"public function setMethod(?string $method): void Zmiana nazwy metody.","title":"setMethod"},{"location":"documentation/route/#getparams","text":"public function getParams(): array Pobranie parametr\u00f3w.","title":"getParams"},{"location":"documentation/route/#setparams","text":"public function setParams(array $params): void Zmiana parametr\u00f3w.","title":"setParams"},{"location":"documentation/route/#reload","text":"public function reload(): void Prze\u0142adowanie routingu w celu zastosowanie predefiniowanych routing\u00f3w","title":"reload"},{"location":"documentation/session/","text":"Session Session to klasa odpowiedzialna za zarz\u0105dzanie sesjami u\u017cytkownik\u00f3w. Umo\u017cliwia inicjalizacj\u0119 sesji, a tak\u017ce ustawianie, pobieranie, sprawdzanie istnienia, usuwanie oraz niszczenie danych sesji. Namespace Klasa: Nimblephp\\framework\\Session Interfejs: Nimblephp\\framework\\Interfaces\\SessionInterface Metody Konstruktor public function __construct() Inicjalizuje sesj\u0119, je\u015bli jeszcze nie zosta\u0142a uruchomiona. set public function set($key, $value): void Ustawia warto\u015b\u0107 w sesji pod okre\u015blonym kluczem. get public function get($key): mixed Pobiera warto\u015b\u0107 z sesji dla podanego klucza, zwraca null je\u015bli klucz nie istnieje. exists public function exists($key): bool Sprawdza, czy w sesji istnieje warto\u015b\u0107 przypisana do danego klucza. remove public function remove($key): void Usuwa element z sesji pod okre\u015blonym kluczem. destroy public function destroy(): void Niszczy wszystkie dane sesji i ko\u0144czy sesj\u0119. regenerate public function regenerate(?bool $removeOldSession = false): void Regeneruje ID sesji, opcjonalnie usuwaj\u0105c stare dane sesji.","title":"Session"},{"location":"documentation/session/#session","text":"Session to klasa odpowiedzialna za zarz\u0105dzanie sesjami u\u017cytkownik\u00f3w. Umo\u017cliwia inicjalizacj\u0119 sesji, a tak\u017ce ustawianie, pobieranie, sprawdzanie istnienia, usuwanie oraz niszczenie danych sesji.","title":"Session"},{"location":"documentation/session/#namespace","text":"Klasa: Nimblephp\\framework\\Session Interfejs: Nimblephp\\framework\\Interfaces\\SessionInterface","title":"Namespace"},{"location":"documentation/session/#metody","text":"","title":"Metody"},{"location":"documentation/session/#konstruktor","text":"public function __construct() Inicjalizuje sesj\u0119, je\u015bli jeszcze nie zosta\u0142a uruchomiona.","title":"Konstruktor"},{"location":"documentation/session/#set","text":"public function set($key, $value): void Ustawia warto\u015b\u0107 w sesji pod okre\u015blonym kluczem.","title":"set"},{"location":"documentation/session/#get","text":"public function get($key): mixed Pobiera warto\u015b\u0107 z sesji dla podanego klucza, zwraca null je\u015bli klucz nie istnieje.","title":"get"},{"location":"documentation/session/#exists","text":"public function exists($key): bool Sprawdza, czy w sesji istnieje warto\u015b\u0107 przypisana do danego klucza.","title":"exists"},{"location":"documentation/session/#remove","text":"public function remove($key): void Usuwa element z sesji pod okre\u015blonym kluczem.","title":"remove"},{"location":"documentation/session/#destroy","text":"public function destroy(): void Niszczy wszystkie dane sesji i ko\u0144czy sesj\u0119.","title":"destroy"},{"location":"documentation/session/#regenerate","text":"public function regenerate(?bool $removeOldSession = false): void Regeneruje ID sesji, opcjonalnie usuwaj\u0105c stare dane sesji.","title":"regenerate"},{"location":"documentation/storage/","text":"Storage Zarz\u0105dzanie danymi z folderu storage/ wewn\u0105trz aplikacji Namespace Klasa: Nimblephp\\framework\\Storage Zmienne protected string $basePath : \u015acie\u017cka do folderu wewn\u0105trz storage/ Metody set public function put(string $filePath, string $content): true Zapisuje plik w folderze z podan\u0105 zawarto\u015bci\u0105 append public function append(string $filePath, string $content, string $append = PHP_EOL): true Dopisuje zawarto\u015b\u0107 do pliku get public function get(string $filePath): ?string Pobiera zawarto\u015b\u0107 pliku delete public function delete(string $filePath): bool Usuwa plik` exists public function exists(string $filePath): bool Sprawdza, czy plik istnieje listFiles public function listFiles(): array Zwraca list\u0119 plik\u00f3w w folderze getFullPath public function getFullPath(string $filePath): string Zwraca pe\u0142n\u0105 \u015bcie\u017ck\u0119 do pliku getBasePath public function copy(string $sourcePath, string $destinationPath): bool Kopiuje plik z jednej lokalizacji do drugiej copy public function copy(string $sourcePath, string $destinationPath): bool Kopiuje plik z jednej lokalizacji do drugiej move public function move(string $sourcePath, string $destinationPath): bool Przenosi plik z jednej lokalizacji do drugiej getMetadata public function getMetadata(string $filePath): array Zwraca metadane pliku","title":"Storage"},{"location":"documentation/storage/#storage","text":"Zarz\u0105dzanie danymi z folderu storage/ wewn\u0105trz aplikacji","title":"Storage"},{"location":"documentation/storage/#namespace","text":"Klasa: Nimblephp\\framework\\Storage","title":"Namespace"},{"location":"documentation/storage/#zmienne","text":"protected string $basePath : \u015acie\u017cka do folderu wewn\u0105trz storage/","title":"Zmienne"},{"location":"documentation/storage/#metody","text":"","title":"Metody"},{"location":"documentation/storage/#set","text":"public function put(string $filePath, string $content): true Zapisuje plik w folderze z podan\u0105 zawarto\u015bci\u0105","title":"set"},{"location":"documentation/storage/#append","text":"public function append(string $filePath, string $content, string $append = PHP_EOL): true Dopisuje zawarto\u015b\u0107 do pliku","title":"append"},{"location":"documentation/storage/#get","text":"public function get(string $filePath): ?string Pobiera zawarto\u015b\u0107 pliku","title":"get"},{"location":"documentation/storage/#delete","text":"public function delete(string $filePath): bool Usuwa plik`","title":"delete"},{"location":"documentation/storage/#exists","text":"public function exists(string $filePath): bool Sprawdza, czy plik istnieje","title":"exists"},{"location":"documentation/storage/#listfiles","text":"public function listFiles(): array Zwraca list\u0119 plik\u00f3w w folderze","title":"listFiles"},{"location":"documentation/storage/#getfullpath","text":"public function getFullPath(string $filePath): string Zwraca pe\u0142n\u0105 \u015bcie\u017ck\u0119 do pliku","title":"getFullPath"},{"location":"documentation/storage/#getbasepath","text":"public function copy(string $sourcePath, string $destinationPath): bool Kopiuje plik z jednej lokalizacji do drugiej","title":"getBasePath"},{"location":"documentation/storage/#copy","text":"public function copy(string $sourcePath, string $destinationPath): bool Kopiuje plik z jednej lokalizacji do drugiej","title":"copy"},{"location":"documentation/storage/#move","text":"public function move(string $sourcePath, string $destinationPath): bool Przenosi plik z jednej lokalizacji do drugiej","title":"move"},{"location":"documentation/storage/#getmetadata","text":"public function getMetadata(string $filePath): array Zwraca metadane pliku","title":"getMetadata"},{"location":"documentation/view/","text":"View Wskaz\u00f3wka: Domy\u015blny widok opiera si\u0119 na plikach phtml. Je\u015bli potrzebujesz bardziej zaawansowanych widok\u00f3w, wkr\u00f3tce pojawi si\u0119 instrukcja i kod dla twig i innych. Widok odpowiada za prezentacj\u0119 danych u\u017cytkownikowi. Jest to komponent, kt\u00f3ry wy\u015bwietla dane, kt\u00f3re otrzymuje z kontrolera, zazwyczaj w postaci graficznego interfejsu u\u017cytkownika. Alternawywy Twig Namespace Klasa: Nimblephp\\framework\\View Interface: Nimblephp\\framework\\Interfaces\\ViewInterface Zmienne protected string $viewPath = '/src/View/' : \u015acie\u017cka do folderu z widokami. protected int $responseCode = 200 : Kod odpowiedzi. Metody setResponseCode public function setResponseCode(int $responseCode): void Definiowanie kodu odpowiedzi. render public function render(string $viewName, array $data = []): void Renderowanie widoku na podstawie nazwy widoku i dostarczonych danych.","title":"View"},{"location":"documentation/view/#view","text":"Wskaz\u00f3wka: Domy\u015blny widok opiera si\u0119 na plikach phtml. Je\u015bli potrzebujesz bardziej zaawansowanych widok\u00f3w, wkr\u00f3tce pojawi si\u0119 instrukcja i kod dla twig i innych. Widok odpowiada za prezentacj\u0119 danych u\u017cytkownikowi. Jest to komponent, kt\u00f3ry wy\u015bwietla dane, kt\u00f3re otrzymuje z kontrolera, zazwyczaj w postaci graficznego interfejsu u\u017cytkownika.","title":"View"},{"location":"documentation/view/#alternawywy","text":"Twig","title":"Alternawywy"},{"location":"documentation/view/#namespace","text":"Klasa: Nimblephp\\framework\\View Interface: Nimblephp\\framework\\Interfaces\\ViewInterface","title":"Namespace"},{"location":"documentation/view/#zmienne","text":"protected string $viewPath = '/src/View/' : \u015acie\u017cka do folderu z widokami. protected int $responseCode = 200 : Kod odpowiedzi.","title":"Zmienne"},{"location":"documentation/view/#metody","text":"","title":"Metody"},{"location":"documentation/view/#setresponsecode","text":"public function setResponseCode(int $responseCode): void Definiowanie kodu odpowiedzi.","title":"setResponseCode"},{"location":"documentation/view/#render","text":"public function render(string $viewName, array $data = []): void Renderowanie widoku na podstawie nazwy widoku i dostarczonych danych.","title":"render"},{"location":"extension/form/ajax/","text":"Dynamiczny formularz Ka\u017cdy formularz pozwala na dynamiczne prze\u0142adowanie Wymagania jquery Za\u0142\u0105dowanie pliku js Nale\u017cy zaimportowa\u0107 do widoku automatycznie tworzony plik ajax.js znajduj\u0105cy si\u0119 pod \u015bwie\u017ck\u0105: /assets/form.js Triggery Klikni\u0119cie w submit ajaxform.submit Przyk\u0142ad $ ( '#myForm' ). on ( 'ajaxform.success' , function ( event , response , form , preventDefault ) { ... preventDefault (); // Zatrzymuje domy\u015blne zachowanie, np. przekierowanie }); Sukcess Wywo\u0142ywany r\u00f3wnie\u017c gdy wyst\u0105pi walidacja ajaxform.success B\u0142\u0105d ajaxform.error","title":"Ajax"},{"location":"extension/form/ajax/#dynamiczny-formularz","text":"Ka\u017cdy formularz pozwala na dynamiczne prze\u0142adowanie","title":"Dynamiczny formularz"},{"location":"extension/form/ajax/#wymagania","text":"jquery","title":"Wymagania"},{"location":"extension/form/ajax/#zaadowanie-pliku-js","text":"Nale\u017cy zaimportowa\u0107 do widoku automatycznie tworzony plik ajax.js znajduj\u0105cy si\u0119 pod \u015bwie\u017ck\u0105: /assets/form.js","title":"Za\u0142\u0105dowanie pliku js"},{"location":"extension/form/ajax/#triggery","text":"","title":"Triggery"},{"location":"extension/form/ajax/#klikniecie-w-submit","text":"ajaxform.submit","title":"Klikni\u0119cie w submit"},{"location":"extension/form/ajax/#przykad","text":"$ ( '#myForm' ). on ( 'ajaxform.success' , function ( event , response , form , preventDefault ) { ... preventDefault (); // Zatrzymuje domy\u015blne zachowanie, np. przekierowanie });","title":"Przyk\u0142ad"},{"location":"extension/form/ajax/#sukcess","text":"Wywo\u0142ywany r\u00f3wnie\u017c gdy wyst\u0105pi walidacja ajaxform.success","title":"Sukcess"},{"location":"extension/form/ajax/#bad","text":"ajaxform.error","title":"B\u0142\u0105d"},{"location":"extension/form/form/","text":"Form Generowanie formularzy dla bootstrap5 Wymagania bootstrap5 Namespace Nimblephp\\form\\Form Zmienne protected array $fields = [] : Tablica p\u00f3l formularza. protected MethodEnum $method = MethodEnum::POST : Metoda HTTP formularza, domy\u015blnie POST. protected ?string $action = null : Adres URL docelowy formularza. protected ?string $id = null : Identyfikator formularza. protected Request $request : Instancja \u017c\u0105dania HTTP. protected array $data = [] : Dane wej\u015bciowe formularza. protected bool $addLinebreak = true : Czy dodawa\u0107 znacznik prze\u0142amania linii po ka\u017cdym polu. protected array $validationErrors = [] : Tablica b\u0142\u0119d\u00f3w walidacji. protected bool $addFormNode = true : Dodanie noda form protected bool $group = false : Grupowanie p\u00f3l protected ?int $col = null : Informacje dla grupowania p\u00f3l Metody __construct public function __construct(?string $action = null, MethodEnum $method = MethodEnum::POST) Inicjalizacja formularza z opcjonalnymi parametrami $action i $method. validation public function validation(array $validations = []): bool Walidacja danych formularza zgodnie z zasadami przekazanymi jako tablica. addField public function addField(string $type, ?string $name, ?string $title, array $attributes = [], array $options = []): self Dodawanie nowego pola do formularza z okre\u015blonymi atrybutami i opcjami. addInput public function addInput(string $name, ?string $title = null, array $attributes = []): self Dodawanie standardowego pola tekstowego. addFloatInput public function addFloatInput(string $name, ?string $title = null, array $attributes = []): self Dodawanie standardowego pola number . addInputHidden public function addInputHidden(string $name, string $value): self Dodawanie ukrytego pola tekstowego. addTextarea public function addTextarea(string $name, ?string $title = null, array $attributes = []): self Dodawanie pola tekstowego typu textarea. addSelect public function addSelect(string $name, array $options, ?string $selectedKey = null, ?string $title = null, array $attributes = []): self Tworzenie pola typu select z przekazanymi opcjami. render public function render(): string Generowanie HTML formularza. setId, getId public function setId(?string $id): void public function getId(): ?string Ustawianie i pobieranie identyfikatora formularza. onSubmit public function onSubmit(): bool Obs\u0142uga zdarzenia wys\u0142ania formularza. renderField protected function renderField(array $field): string Generowanie pola generateAttributes protected function generateAttributes(array $attributes): string Generowanie atrybut\u00f3w html generateName protected function generateName(string $name, string $prefix = ''): string Generowanie nazwy generateId protected function generateId(string $name): string Generowanie ID Zapisanie danych protected function setData(array $data): void Zapisanie danych getDataByKey protected function getDataByKey(?string $name): ?string Pobranie danych formularza po kluczu (nazwie) prepareData protected function prepareData(): bool Przygotowanie danych title public function title(string $title): self Tytu\u0142 formularza startGroup, stopGroup public function startGroup(int $col = 6, array $attributes = []): self public function stopGroup(): self Rozpocz\u0119cie oraz zako\u0144czenie grupy p\u00f3l","title":"Form"},{"location":"extension/form/form/#form","text":"Generowanie formularzy dla bootstrap5","title":"Form"},{"location":"extension/form/form/#wymagania","text":"bootstrap5","title":"Wymagania"},{"location":"extension/form/form/#namespace","text":"Nimblephp\\form\\Form","title":"Namespace"},{"location":"extension/form/form/#zmienne","text":"protected array $fields = [] : Tablica p\u00f3l formularza. protected MethodEnum $method = MethodEnum::POST : Metoda HTTP formularza, domy\u015blnie POST. protected ?string $action = null : Adres URL docelowy formularza. protected ?string $id = null : Identyfikator formularza. protected Request $request : Instancja \u017c\u0105dania HTTP. protected array $data = [] : Dane wej\u015bciowe formularza. protected bool $addLinebreak = true : Czy dodawa\u0107 znacznik prze\u0142amania linii po ka\u017cdym polu. protected array $validationErrors = [] : Tablica b\u0142\u0119d\u00f3w walidacji. protected bool $addFormNode = true : Dodanie noda form protected bool $group = false : Grupowanie p\u00f3l protected ?int $col = null : Informacje dla grupowania p\u00f3l","title":"Zmienne"},{"location":"extension/form/form/#metody","text":"","title":"Metody"},{"location":"extension/form/form/#__construct","text":"public function __construct(?string $action = null, MethodEnum $method = MethodEnum::POST) Inicjalizacja formularza z opcjonalnymi parametrami $action i $method.","title":"__construct"},{"location":"extension/form/form/#validation","text":"public function validation(array $validations = []): bool Walidacja danych formularza zgodnie z zasadami przekazanymi jako tablica.","title":"validation"},{"location":"extension/form/form/#addfield","text":"public function addField(string $type, ?string $name, ?string $title, array $attributes = [], array $options = []): self Dodawanie nowego pola do formularza z okre\u015blonymi atrybutami i opcjami.","title":"addField"},{"location":"extension/form/form/#addinput","text":"public function addInput(string $name, ?string $title = null, array $attributes = []): self Dodawanie standardowego pola tekstowego.","title":"addInput"},{"location":"extension/form/form/#addfloatinput","text":"public function addFloatInput(string $name, ?string $title = null, array $attributes = []): self Dodawanie standardowego pola number .","title":"addFloatInput"},{"location":"extension/form/form/#addinputhidden","text":"public function addInputHidden(string $name, string $value): self Dodawanie ukrytego pola tekstowego.","title":"addInputHidden"},{"location":"extension/form/form/#addtextarea","text":"public function addTextarea(string $name, ?string $title = null, array $attributes = []): self Dodawanie pola tekstowego typu textarea.","title":"addTextarea"},{"location":"extension/form/form/#addselect","text":"public function addSelect(string $name, array $options, ?string $selectedKey = null, ?string $title = null, array $attributes = []): self Tworzenie pola typu select z przekazanymi opcjami.","title":"addSelect"},{"location":"extension/form/form/#render","text":"public function render(): string Generowanie HTML formularza.","title":"render"},{"location":"extension/form/form/#setid-getid","text":"public function setId(?string $id): void public function getId(): ?string Ustawianie i pobieranie identyfikatora formularza.","title":"setId, getId"},{"location":"extension/form/form/#onsubmit","text":"public function onSubmit(): bool Obs\u0142uga zdarzenia wys\u0142ania formularza.","title":"onSubmit"},{"location":"extension/form/form/#renderfield","text":"protected function renderField(array $field): string Generowanie pola","title":"renderField"},{"location":"extension/form/form/#generateattributes","text":"protected function generateAttributes(array $attributes): string Generowanie atrybut\u00f3w html","title":"generateAttributes"},{"location":"extension/form/form/#generatename","text":"protected function generateName(string $name, string $prefix = ''): string Generowanie nazwy","title":"generateName"},{"location":"extension/form/form/#generateid","text":"protected function generateId(string $name): string Generowanie ID","title":"generateId"},{"location":"extension/form/form/#zapisanie-danych","text":"protected function setData(array $data): void Zapisanie danych","title":"Zapisanie danych"},{"location":"extension/form/form/#getdatabykey","text":"protected function getDataByKey(?string $name): ?string Pobranie danych formularza po kluczu (nazwie)","title":"getDataByKey"},{"location":"extension/form/form/#preparedata","text":"protected function prepareData(): bool Przygotowanie danych","title":"prepareData"},{"location":"extension/form/form/#title","text":"public function title(string $title): self Tytu\u0142 formularza","title":"title"},{"location":"extension/form/form/#startgroup-stopgroup","text":"public function startGroup(int $col = 6, array $attributes = []): self public function stopGroup(): self Rozpocz\u0119cie oraz zako\u0144czenie grupy p\u00f3l","title":"startGroup, stopGroup"},{"location":"extension/form/form_builder/","text":"FormBuilder Tworzenie w\u0142asnej klasy tworz\u0105cej formularz. Namespace Nimblephp\\form\\FormBuilder Zmienne public Form $form : Instancja formularza. public array $models = [] : Tablica za\u0142adowanych modeli. protected MethodEnum $method = MethodEnum::POST : Metoda HTTP formularza, domy\u015blnie POST. protected ?string $action = null : Adres URL docelowy formularza. protected ?ControllerInterface $controller = null : Instancja kontrolera. protected Request $request : Instancja request protected array $data = [] : Dane wej\u015bciowe formularza. protected array $postData = [] : Dane przes\u0142ane przez formularz. Metody __construct public function __construct(?ControllerInterface $controller = null) Inicjalizacja klasy z opcjonalnym parametrem $controller. generate public static function generate(string $name, ?ControllerInterface $controller = null, array $data = []): string Generowanie formularza addError public function addError(string $name, string $error): void R\u0119czne dodanie b\u0142\u0119du walidacji log public function log(string $message, string $level = 'INFO', array $content = []): bool Logowanie zdarze\u0144 loadModel public function loadModel(string $name): AbstractModel Za\u0142adowanie modelu Przyk\u0142ady Formularz <?php namespace src\\Form ; class login extends \\Nimblephp\\form\\FormBuilder { public function init () : void { $this -> form -> setId ( 'login' ); } /** * create form * @return void */ public function create () : void { $this -> form -> addInput ( 'account/login' , 'Login' ); $this -> form -> addInput ( 'account/password' , 'Has\u0142o' , [ 'type' => 'password' ]); $this -> form -> addSubmitButton ( 'Login' ); } /** * validation form * @return array */ public function validation () : array { return [ 'account/login' => [ 'required' , 'length' => [ 'min' => 8 , 'max' => 128 ] ], 'account/password' => [ 'required' , 'length' => [ 'min' => 6 , 'max' => 70 ] ] ]; } /** * submit form * @return void * @throws DatabaseException * @throws NimbleException * @throws NotFoundException */ public function onSubmit () : void { var_dump ( 'Success login submit' ); } }","title":"FormBuilder"},{"location":"extension/form/form_builder/#formbuilder","text":"Tworzenie w\u0142asnej klasy tworz\u0105cej formularz.","title":"FormBuilder"},{"location":"extension/form/form_builder/#namespace","text":"Nimblephp\\form\\FormBuilder","title":"Namespace"},{"location":"extension/form/form_builder/#zmienne","text":"public Form $form : Instancja formularza. public array $models = [] : Tablica za\u0142adowanych modeli. protected MethodEnum $method = MethodEnum::POST : Metoda HTTP formularza, domy\u015blnie POST. protected ?string $action = null : Adres URL docelowy formularza. protected ?ControllerInterface $controller = null : Instancja kontrolera. protected Request $request : Instancja request protected array $data = [] : Dane wej\u015bciowe formularza. protected array $postData = [] : Dane przes\u0142ane przez formularz.","title":"Zmienne"},{"location":"extension/form/form_builder/#metody","text":"","title":"Metody"},{"location":"extension/form/form_builder/#__construct","text":"public function __construct(?ControllerInterface $controller = null) Inicjalizacja klasy z opcjonalnym parametrem $controller.","title":"__construct"},{"location":"extension/form/form_builder/#generate","text":"public static function generate(string $name, ?ControllerInterface $controller = null, array $data = []): string Generowanie formularza","title":"generate"},{"location":"extension/form/form_builder/#adderror","text":"public function addError(string $name, string $error): void R\u0119czne dodanie b\u0142\u0119du walidacji","title":"addError"},{"location":"extension/form/form_builder/#log","text":"public function log(string $message, string $level = 'INFO', array $content = []): bool Logowanie zdarze\u0144","title":"log"},{"location":"extension/form/form_builder/#loadmodel","text":"public function loadModel(string $name): AbstractModel Za\u0142adowanie modelu","title":"loadModel"},{"location":"extension/form/form_builder/#przykady","text":"","title":"Przyk\u0142ady"},{"location":"extension/form/form_builder/#formularz","text":"<?php namespace src\\Form ; class login extends \\Nimblephp\\form\\FormBuilder { public function init () : void { $this -> form -> setId ( 'login' ); } /** * create form * @return void */ public function create () : void { $this -> form -> addInput ( 'account/login' , 'Login' ); $this -> form -> addInput ( 'account/password' , 'Has\u0142o' , [ 'type' => 'password' ]); $this -> form -> addSubmitButton ( 'Login' ); } /** * validation form * @return array */ public function validation () : array { return [ 'account/login' => [ 'required' , 'length' => [ 'min' => 8 , 'max' => 128 ] ], 'account/password' => [ 'required' , 'length' => [ 'min' => 6 , 'max' => 70 ] ] ]; } /** * submit form * @return void * @throws DatabaseException * @throws NimbleException * @throws NotFoundException */ public function onSubmit () : void { var_dump ( 'Success login submit' ); } }","title":"Formularz"},{"location":"extension/form/start/","text":"Formularze Form to biblioteka umo\u017cliwiaj\u0105ca tworzenie i walidowania formularzy Instalacja composer require nimblephp/form U\u017cycie W kontrolerze utw\u00f3rz skrypt generuj\u0105cy formularz np.: $form = new FormBootstrap(); $form->setId('test_form'); $form->addInput('name/name', 'Title'); $form->addTextarea('name/textarea', 'Textarea', ['value' => 'xxx']); $form->addField('checkbox', 'name/checkbox', 'Checkbox'); $form->addSelect('name/select', ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5]); $form->addSubmitButton('Submit'); if ($form->onSubmit()) { var_dump('Submit form'); } echo $form->render(); Inne szablony Bootstrap 5 Aby wykorzysta\u0107 z gotowej biblioteki dzia\u0142aj\u0105cej pod bootstrap nale\u017cy u\u017cy\u0107 klasy FormBootstrap Zmiana j\u0119zyka Dost\u0119pne j\u0119zyki: EN (domy\u015blnie), PL Form::changeLanguage('PL');","title":"Instalacja"},{"location":"extension/form/start/#formularze","text":"Form to biblioteka umo\u017cliwiaj\u0105ca tworzenie i walidowania formularzy","title":"Formularze"},{"location":"extension/form/start/#instalacja","text":"composer require nimblephp/form","title":"Instalacja"},{"location":"extension/form/start/#uzycie","text":"W kontrolerze utw\u00f3rz skrypt generuj\u0105cy formularz np.: $form = new FormBootstrap(); $form->setId('test_form'); $form->addInput('name/name', 'Title'); $form->addTextarea('name/textarea', 'Textarea', ['value' => 'xxx']); $form->addField('checkbox', 'name/checkbox', 'Checkbox'); $form->addSelect('name/select', ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5]); $form->addSubmitButton('Submit'); if ($form->onSubmit()) { var_dump('Submit form'); } echo $form->render();","title":"U\u017cycie"},{"location":"extension/form/start/#inne-szablony","text":"Bootstrap 5 Aby wykorzysta\u0107 z gotowej biblioteki dzia\u0142aj\u0105cej pod bootstrap nale\u017cy u\u017cy\u0107 klasy FormBootstrap","title":"Inne szablony"},{"location":"extension/form/start/#zmiana-jezyka","text":"Dost\u0119pne j\u0119zyki: EN (domy\u015blnie), PL Form::changeLanguage('PL');","title":"Zmiana j\u0119zyka"},{"location":"extension/form/validations/","text":"Walidacje Mo\u017cliwe gotowe walidacje U\u017cywanie walidacji w formularzu Walidacje generowane s\u0105 w nast\u0119puj\u0105cy spos\u00f3b: $form = new Form(); $form->addInput('name/name', 'Title'); $form->validation([ 'name/name' => [ 'required', function($value) { if ($value !== 'test') { throw new ValidationException('Custom validation'); } } ] ]); Teraz przy wywo\u0142aniu formularza walidacja zostanie wy\u015bwietlona Pole wymagane, nie mo\u017ce by\u0107 puste required Minimalna ilo\u015b\u0107 znak\u00f3w length_min => '<int>' Maksymalna ilo\u015b\u0107 znak\u00f3w length_max => '<int>' Czy pole zawiera adres e-mail is_email Czy warto\u015b\u0107 pola to liczba is_integer","title":"Walidacje"},{"location":"extension/form/validations/#walidacje","text":"Mo\u017cliwe gotowe walidacje","title":"Walidacje"},{"location":"extension/form/validations/#uzywanie-walidacji-w-formularzu","text":"Walidacje generowane s\u0105 w nast\u0119puj\u0105cy spos\u00f3b: $form = new Form(); $form->addInput('name/name', 'Title'); $form->validation([ 'name/name' => [ 'required', function($value) { if ($value !== 'test') { throw new ValidationException('Custom validation'); } } ] ]); Teraz przy wywo\u0142aniu formularza walidacja zostanie wy\u015bwietlona","title":"U\u017cywanie walidacji w formularzu"},{"location":"extension/form/validations/#pole-wymagane-nie-moze-byc-puste","text":"required","title":"Pole wymagane, nie mo\u017ce by\u0107 puste"},{"location":"extension/form/validations/#minimalna-ilosc-znakow","text":"length_min => '<int>'","title":"Minimalna ilo\u015b\u0107 znak\u00f3w"},{"location":"extension/form/validations/#maksymalna-ilosc-znakow","text":"length_max => '<int>'","title":"Maksymalna ilo\u015b\u0107 znak\u00f3w"},{"location":"extension/form/validations/#czy-pole-zawiera-adres-e-mail","text":"is_email","title":"Czy pole zawiera adres e-mail"},{"location":"extension/form/validations/#czy-wartosc-pola-to-liczba","text":"is_integer","title":"Czy warto\u015b\u0107 pola to liczba"},{"location":"extension/migrations/abstract_migration/","text":"AbstractMigration Klasa dziedziczona przez skrypty migracyjne Namespace Klasa: Nimblephp\\migrations\\AbstractMigration Interfejs: Nimblephp\\migrations\\Interfaces\\MigrationInterface Zmienne public ControllerInterface $controller : Klasa kontrolera Metody setSameSite public function loadModel(string $name): AbstractModel Za\u0142adowanie modelu","title":"AbstractMigration"},{"location":"extension/migrations/abstract_migration/#abstractmigration","text":"Klasa dziedziczona przez skrypty migracyjne","title":"AbstractMigration"},{"location":"extension/migrations/abstract_migration/#namespace","text":"Klasa: Nimblephp\\migrations\\AbstractMigration Interfejs: Nimblephp\\migrations\\Interfaces\\MigrationInterface","title":"Namespace"},{"location":"extension/migrations/abstract_migration/#zmienne","text":"public ControllerInterface $controller : Klasa kontrolera","title":"Zmienne"},{"location":"extension/migrations/abstract_migration/#metody","text":"","title":"Metody"},{"location":"extension/migrations/abstract_migration/#setsamesite","text":"public function loadModel(string $name): AbstractModel Za\u0142adowanie modelu","title":"setSameSite"},{"location":"extension/migrations/migrations/","text":"Migrations Klasa zarz\u0105dza procesem migracji bazy danych. Namespace Klasa: Nimblephp\\migrations\\Migrations W\u0142a\u015bciwo\u015bci $projectPath : \u015acie\u017cka do projektu. $migrationsPath : \u015acie\u017cka do katalogu migracji. $migrationList : Lista plik\u00f3w migracji. $migrationTable : Instancja tabeli migracji. Konstruktor public function __construct(string $projectPath) Inicjalizuje \u015bcie\u017cki i konfiguracje, \u0142\u0105czy z baz\u0105 danych, inicjuje tabel\u0119 migracji. Metody runMigrations public function runMigrations(): void Uruchamia wszystkie migracje zdefiniowane w katalogu migracji. checkMigrations protected function checkMigrations(): void Sprawdza status istniej\u0105cych migracji, rzuca wyj\u0105tki w przypadku b\u0142\u0119d\u00f3w. generateMigrationList protected function generateMigrationList(): void Generuje list\u0119 plik\u00f3w migracji do wykonania. initTable protected function initTable(): void Inicjuje tabel\u0119 migracji w bazie danych. connectDatabase protected function connectDatabase(): void \u0141\u0105czy z baz\u0105 danych u\u017cywaj\u0105c konfiguracji.","title":"Migrations"},{"location":"extension/migrations/migrations/#migrations","text":"Klasa zarz\u0105dza procesem migracji bazy danych.","title":"Migrations"},{"location":"extension/migrations/migrations/#namespace","text":"Klasa: Nimblephp\\migrations\\Migrations","title":"Namespace"},{"location":"extension/migrations/migrations/#wasciwosci","text":"$projectPath : \u015acie\u017cka do projektu. $migrationsPath : \u015acie\u017cka do katalogu migracji. $migrationList : Lista plik\u00f3w migracji. $migrationTable : Instancja tabeli migracji.","title":"W\u0142a\u015bciwo\u015bci"},{"location":"extension/migrations/migrations/#konstruktor","text":"public function __construct(string $projectPath) Inicjalizuje \u015bcie\u017cki i konfiguracje, \u0142\u0105czy z baz\u0105 danych, inicjuje tabel\u0119 migracji.","title":"Konstruktor"},{"location":"extension/migrations/migrations/#metody","text":"","title":"Metody"},{"location":"extension/migrations/migrations/#runmigrations","text":"public function runMigrations(): void Uruchamia wszystkie migracje zdefiniowane w katalogu migracji.","title":"runMigrations"},{"location":"extension/migrations/migrations/#checkmigrations","text":"protected function checkMigrations(): void Sprawdza status istniej\u0105cych migracji, rzuca wyj\u0105tki w przypadku b\u0142\u0119d\u00f3w.","title":"checkMigrations"},{"location":"extension/migrations/migrations/#generatemigrationlist","text":"protected function generateMigrationList(): void Generuje list\u0119 plik\u00f3w migracji do wykonania.","title":"generateMigrationList"},{"location":"extension/migrations/migrations/#inittable","text":"protected function initTable(): void Inicjuje tabel\u0119 migracji w bazie danych.","title":"initTable"},{"location":"extension/migrations/migrations/#connectdatabase","text":"protected function connectDatabase(): void \u0141\u0105czy z baz\u0105 danych u\u017cywaj\u0105c konfiguracji.","title":"connectDatabase"},{"location":"extension/migrations/start/","text":"Migracje Migraje uruchamiaj\u0105 skrypty SQL z folderu migrations z kolejno\u015bci\u0105 w celu \u0142atwego aktualizowania bazy danych Migracje uruchamiane s\u0105 w kolejno\u015bci numerycznej od 1 do 9, dlatego wa\u017cnym jest nazywanie plik\u00f3w .sql numerycznie w kolejno\u015bci uruchomienia od najmniejszego do najwi\u0119kszego Instalacja composer require nimblephp/migrations U\u017cycie W folderze projektu tworzymi plik update.php oraz folder migrations w pliku update.php wpisujemy nast\u0119puj\u0105cy kod: <?php include ( '../vendor/autoload.php' ); $migrations = new \\Nimblephp\\migrations\\Migrations ( __DIR__ ); $migrations -> runMigrations (); W folderze pliku migrations mo\u017cemy utworzy\u0107 pliku .sql lub .php o nazwie odpowiadaj\u0105cej timestamp (bash: date +%s ) Uruchamiamy plik update.php w konsoli ( php update.php ) Wygl\u0105d pliku PHP <?php use Nimblephp\\migrations\\AbstractMigration ; return new class extends AbstractMigration { public function run () { //kod do wykonania } };","title":"Instalacja"},{"location":"extension/migrations/start/#migracje","text":"Migraje uruchamiaj\u0105 skrypty SQL z folderu migrations z kolejno\u015bci\u0105 w celu \u0142atwego aktualizowania bazy danych Migracje uruchamiane s\u0105 w kolejno\u015bci numerycznej od 1 do 9, dlatego wa\u017cnym jest nazywanie plik\u00f3w .sql numerycznie w kolejno\u015bci uruchomienia od najmniejszego do najwi\u0119kszego","title":"Migracje"},{"location":"extension/migrations/start/#instalacja","text":"composer require nimblephp/migrations","title":"Instalacja"},{"location":"extension/migrations/start/#uzycie","text":"W folderze projektu tworzymi plik update.php oraz folder migrations w pliku update.php wpisujemy nast\u0119puj\u0105cy kod: <?php include ( '../vendor/autoload.php' ); $migrations = new \\Nimblephp\\migrations\\Migrations ( __DIR__ ); $migrations -> runMigrations (); W folderze pliku migrations mo\u017cemy utworzy\u0107 pliku .sql lub .php o nazwie odpowiadaj\u0105cej timestamp (bash: date +%s ) Uruchamiamy plik update.php w konsoli ( php update.php )","title":"U\u017cycie"},{"location":"extension/migrations/start/#wyglad-pliku-php","text":"<?php use Nimblephp\\migrations\\AbstractMigration ; return new class extends AbstractMigration { public function run () { //kod do wykonania } };","title":"Wygl\u0105d pliku PHP"},{"location":"extension/migrations/status/","text":"Statusy Namespace Nimblephp\\migrations\\Status Enum PENDING - W trakcie FINISHED - Zako\u0144czone FAILED - B\u0142\u0105d","title":"Status"},{"location":"extension/migrations/status/#statusy","text":"","title":"Statusy"},{"location":"extension/migrations/status/#namespace","text":"Nimblephp\\migrations\\Status","title":"Namespace"},{"location":"extension/migrations/status/#enum","text":"PENDING - W trakcie FINISHED - Zako\u0144czone FAILED - B\u0142\u0105d","title":"Enum"},{"location":"extension/twig/start/","text":"Twig Widoki z obs\u0142ug\u0105 silnika szablon\u00f3w Twig Instalacja composer require nimblephp/twig U\u017cycie Nale\u017cy utworzy\u0107 plik w folderze View o rozszerzeniu .twig np. test.twig W metodzie kontrolera dajemy: $view = new View(new Twig()); $view->render('test'); Konfiguracja .env TWIG_CACHE=false # czy twig ma tworzy\u0107 pliki cache","title":"Instalacja"},{"location":"extension/twig/start/#twig","text":"Widoki z obs\u0142ug\u0105 silnika szablon\u00f3w Twig","title":"Twig"},{"location":"extension/twig/start/#instalacja","text":"composer require nimblephp/twig","title":"Instalacja"},{"location":"extension/twig/start/#uzycie","text":"Nale\u017cy utworzy\u0107 plik w folderze View o rozszerzeniu .twig np. test.twig W metodzie kontrolera dajemy: $view = new View(new Twig()); $view->render('test');","title":"U\u017cycie"},{"location":"extension/twig/start/#konfiguracja-env","text":"TWIG_CACHE=false # czy twig ma tworzy\u0107 pliki cache","title":"Konfiguracja .env"},{"location":"extension/twig/template/","text":"Instancja Widoku Twig Klasa Template jest zaprojektowana do zarz\u0105dzania szablonami strony. \u015acie\u017cka do szablon\u00f3w jest zdefiniowana z g\u00f3ry i nie mo\u017cna jej zmieni\u0107: <project path>/templates Namespace Klasa: Nimblephp\\twig\\Template Zmienne public string $name : Nazwa szablonu public Twig $twig : Instancja twig, automatycznie przypisywana podczas tworzenia objektu Metody Konstruktor public function __construct($name) $name : Nazwa szablonu render public function render(array $variables = []): void Renderowanie szablonu","title":"Template"},{"location":"extension/twig/template/#instancja-widoku-twig","text":"Klasa Template jest zaprojektowana do zarz\u0105dzania szablonami strony. \u015acie\u017cka do szablon\u00f3w jest zdefiniowana z g\u00f3ry i nie mo\u017cna jej zmieni\u0107: <project path>/templates","title":"Instancja Widoku Twig"},{"location":"extension/twig/template/#namespace","text":"Klasa: Nimblephp\\twig\\Template","title":"Namespace"},{"location":"extension/twig/template/#zmienne","text":"public string $name : Nazwa szablonu public Twig $twig : Instancja twig, automatycznie przypisywana podczas tworzenia objektu","title":"Zmienne"},{"location":"extension/twig/template/#metody","text":"","title":"Metody"},{"location":"extension/twig/template/#konstruktor","text":"public function __construct($name) $name : Nazwa szablonu","title":"Konstruktor"},{"location":"extension/twig/template/#render","text":"public function render(array $variables = []): void Renderowanie szablonu","title":"render"},{"location":"extension/twig/twig/","text":"Instancja Pomocnika Twig Klasa odpowiada za zarz\u0105dzanie \u015brodowiskiem renderowania szablon\u00f3w Twig. Namespace Klasa: Nimblephp\\twig\\Twig Zmienne statyczne $globalVariables = [] : Zmienne globalne $globalPaths = [] : Zmienne z dodatkowymi \u015bcie\u017ckami do widok\u00f3w Zmienne $twigFileSystemLoader : Instancja FilesystemLoader do zarz\u0105dzania \u015bcie\u017ckami plik\u00f3w. $twigEnvironment : Instancja Environment reprezentuj\u0105ca \u015brodowisko Twig. Metody addPath public function addPath($path): void Dodaje \u015bcie\u017ck\u0119 do loadera systemu plik\u00f3w. render public function render(string $twigFilePath, array $variables = []): string Renderuje widok Twig z okre\u015blonymi zmiennymi i zwraca wynikowy ci\u0105g. renderSimpleException public function renderSimpleException(Throwable $throwable): string Renderuje przyjazny dla u\u017cytkownika widok b\u0142\u0119du addPath public function addPath($path): void Dodanie dodatkowej \u015bcie\u017cki do folderu do twigFileSystemLoader renderSimpleException public function renderSimpleException(Throwable $throwable, array $variables = []): string Wygenerowanie prostego widoku b\u0142\u0119du addGlobal public function addGlobal(string $name, mixed $value): void Dodanie zmiennej globalnej throwableToString private function throwableToString(Throwable $throwable): string Konwersja wyj\u0105tk\u00f3w na string loadFunctions private function loadFunctions(string $directory): void \u0141adowanie dodatkowych funkcji dla Twig","title":"Twig"},{"location":"extension/twig/twig/#instancja-pomocnika-twig","text":"Klasa odpowiada za zarz\u0105dzanie \u015brodowiskiem renderowania szablon\u00f3w Twig.","title":"Instancja Pomocnika Twig"},{"location":"extension/twig/twig/#namespace","text":"Klasa: Nimblephp\\twig\\Twig","title":"Namespace"},{"location":"extension/twig/twig/#zmienne-statyczne","text":"$globalVariables = [] : Zmienne globalne $globalPaths = [] : Zmienne z dodatkowymi \u015bcie\u017ckami do widok\u00f3w","title":"Zmienne statyczne"},{"location":"extension/twig/twig/#zmienne","text":"$twigFileSystemLoader : Instancja FilesystemLoader do zarz\u0105dzania \u015bcie\u017ckami plik\u00f3w. $twigEnvironment : Instancja Environment reprezentuj\u0105ca \u015brodowisko Twig.","title":"Zmienne"},{"location":"extension/twig/twig/#metody","text":"","title":"Metody"},{"location":"extension/twig/twig/#addpath","text":"public function addPath($path): void Dodaje \u015bcie\u017ck\u0119 do loadera systemu plik\u00f3w.","title":"addPath"},{"location":"extension/twig/twig/#render","text":"public function render(string $twigFilePath, array $variables = []): string Renderuje widok Twig z okre\u015blonymi zmiennymi i zwraca wynikowy ci\u0105g.","title":"render"},{"location":"extension/twig/twig/#rendersimpleexception","text":"public function renderSimpleException(Throwable $throwable): string Renderuje przyjazny dla u\u017cytkownika widok b\u0142\u0119du","title":"renderSimpleException"},{"location":"extension/twig/twig/#addpath_1","text":"public function addPath($path): void Dodanie dodatkowej \u015bcie\u017cki do folderu do twigFileSystemLoader","title":"addPath"},{"location":"extension/twig/twig/#rendersimpleexception_1","text":"public function renderSimpleException(Throwable $throwable, array $variables = []): string Wygenerowanie prostego widoku b\u0142\u0119du","title":"renderSimpleException"},{"location":"extension/twig/twig/#addglobal","text":"public function addGlobal(string $name, mixed $value): void Dodanie zmiennej globalnej","title":"addGlobal"},{"location":"extension/twig/twig/#throwabletostring","text":"private function throwableToString(Throwable $throwable): string Konwersja wyj\u0105tk\u00f3w na string","title":"throwableToString"},{"location":"extension/twig/twig/#loadfunctions","text":"private function loadFunctions(string $directory): void \u0141adowanie dodatkowych funkcji dla Twig","title":"loadFunctions"},{"location":"extension/twig/view/","text":"Instancja Widoku Twig Klasa View jest zaprojektowana do zarz\u0105dzania renderowaniem widok\u00f3w za pomoc\u0105 silnika szablon\u00f3w Twig. Namespace Klasa: Nimblephp\\twig\\View Interface: Nimblephp\\framework\\Interfaces\\ViewInterface W\u0142a\u015bciwo\u015bci \u015acie\u017cka widoku : protected string $viewPath = '/src/View/' Zmienne widoku : protected array $variables = [] Instancja Twig : protected Twig $twig Kod odpowiedzi : protected int $responseCode = 200 Konstruktor Przyjmuje instancj\u0119 Twig i inicjalizuje klas\u0119. Metody setResponseCode public function setResponseCode(int $responseCode): void Definiowanie kodu odpowiedzi. render public function render(string $viewName, array $data = []): void Renderowanie widoku na podstawie nazwy widoku i dostarczonych danych.","title":"View"},{"location":"extension/twig/view/#instancja-widoku-twig","text":"Klasa View jest zaprojektowana do zarz\u0105dzania renderowaniem widok\u00f3w za pomoc\u0105 silnika szablon\u00f3w Twig.","title":"Instancja Widoku Twig"},{"location":"extension/twig/view/#namespace","text":"Klasa: Nimblephp\\twig\\View Interface: Nimblephp\\framework\\Interfaces\\ViewInterface","title":"Namespace"},{"location":"extension/twig/view/#wasciwosci","text":"\u015acie\u017cka widoku : protected string $viewPath = '/src/View/' Zmienne widoku : protected array $variables = [] Instancja Twig : protected Twig $twig Kod odpowiedzi : protected int $responseCode = 200","title":"W\u0142a\u015bciwo\u015bci"},{"location":"extension/twig/view/#konstruktor","text":"Przyjmuje instancj\u0119 Twig i inicjalizuje klas\u0119.","title":"Konstruktor"},{"location":"extension/twig/view/#metody","text":"","title":"Metody"},{"location":"extension/twig/view/#setresponsecode","text":"public function setResponseCode(int $responseCode): void Definiowanie kodu odpowiedzi.","title":"setResponseCode"},{"location":"extension/twig/view/#render","text":"public function render(string $viewName, array $data = []): void Renderowanie widoku na podstawie nazwy widoku i dostarczonych danych.","title":"render"},{"location":"extension/twig/functions/action/","text":"Funkcja akcji Funkcja pozwala na wykonanie zapytania do kontrolera bezpo\u015brednio w twig, pozwala to na do\u0142adowywania osobnych widok\u00f3w do ju\u017c istniej\u0105cego wydoku. Metoda action(string $controller, string $method, string ...$params): false|string Zmienne $controller : nazwa kontrolera $method : nazwa metody ...$params : dodatkowe przes\u0142ane parametry Przyk\u0142ad: index.twig Table: {{ action ( 'tables' , 'main' ) }}","title":"Action"},{"location":"extension/twig/functions/action/#funkcja-akcji","text":"Funkcja pozwala na wykonanie zapytania do kontrolera bezpo\u015brednio w twig, pozwala to na do\u0142adowywania osobnych widok\u00f3w do ju\u017c istniej\u0105cego wydoku.","title":"Funkcja akcji"},{"location":"extension/twig/functions/action/#metoda","text":"action(string $controller, string $method, string ...$params): false|string","title":"Metoda"},{"location":"extension/twig/functions/action/#zmienne","text":"$controller : nazwa kontrolera $method : nazwa metody ...$params : dodatkowe przes\u0142ane parametry","title":"Zmienne"},{"location":"extension/twig/functions/action/#przykad","text":"index.twig Table: {{ action ( 'tables' , 'main' ) }}","title":"Przyk\u0142ad:"},{"location":"extension/twig/functions/js/","text":"Funkcja skrypt\u00f3w js Funkcja pozwala na wczytanie pliku js dla widoku Widok powinien by\u0107 utworzony w tym samym folderze co widok i o takiej samej nazwie z rozszerzeniem .js Wymagania jquery Metoda js(array $data = []): string Zmienne $data : Parametry przes\u0142ane do skryptu Przyk\u0142ad: index.twig <div id='test'>...</div> {{ js ({ 'isActive' : true }) }} index.js ( function ( $self , data ) { $ ( '#id' ). text ( 'success' ); }) Wa\u017cne Funkcja js powinna by\u0107 wykonywana w g\u0142\u00f3wnym elemencie gdy\u017c zmienna $self zawiera parenta wykonywanego skryptu","title":"JS"},{"location":"extension/twig/functions/js/#funkcja-skryptow-js","text":"Funkcja pozwala na wczytanie pliku js dla widoku Widok powinien by\u0107 utworzony w tym samym folderze co widok i o takiej samej nazwie z rozszerzeniem .js","title":"Funkcja skrypt\u00f3w js"},{"location":"extension/twig/functions/js/#wymagania","text":"jquery","title":"Wymagania"},{"location":"extension/twig/functions/js/#metoda","text":"js(array $data = []): string","title":"Metoda"},{"location":"extension/twig/functions/js/#zmienne","text":"$data : Parametry przes\u0142ane do skryptu","title":"Zmienne"},{"location":"extension/twig/functions/js/#przykad","text":"index.twig <div id='test'>...</div> {{ js ({ 'isActive' : true }) }} index.js ( function ( $self , data ) { $ ( '#id' ). text ( 'success' ); })","title":"Przyk\u0142ad:"},{"location":"extension/twig/functions/js/#wazne","text":"Funkcja js powinna by\u0107 wykonywana w g\u0142\u00f3wnym elemencie gdy\u017c zmienna $self zawiera parenta wykonywanego skryptu","title":"Wa\u017cne"},{"location":"extension/twig/functions/view/","text":"Funkcja \u0142adowania widoku Funkcja pozwala na za\u0142adowanie pliku widoku Metoda view(string $controller, string $action, array $data): false|string Zmienne $controller : nazwa kontrolera $$action : nazwa akcji (metody) $data : dane przes\u0142ne do widoku Przyk\u0142ad: index.twig Table: {{ view ( 'dashboard' , 'menu' , { 'name' : 'value' }) }}","title":"View"},{"location":"extension/twig/functions/view/#funkcja-adowania-widoku","text":"Funkcja pozwala na za\u0142adowanie pliku widoku","title":"Funkcja \u0142adowania widoku"},{"location":"extension/twig/functions/view/#metoda","text":"view(string $controller, string $action, array $data): false|string","title":"Metoda"},{"location":"extension/twig/functions/view/#zmienne","text":"$controller : nazwa kontrolera $$action : nazwa akcji (metody) $data : dane przes\u0142ne do widoku","title":"Zmienne"},{"location":"extension/twig/functions/view/#przykad","text":"index.twig Table: {{ view ( 'dashboard' , 'menu' , { 'name' : 'value' }) }}","title":"Przyk\u0142ad:"}]}